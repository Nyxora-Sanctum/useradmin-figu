{
  "version": 3,
  "sources": ["../../gridjs/node_modules/preact/dist/preact.module.js", "../../gridjs/src/util/id.ts", "../../gridjs/src/base.ts", "../../gridjs/src/i18n/en_US.ts", "../../gridjs/src/i18n/language.ts", "../../gridjs/src/view/base.tsx", "../../gridjs/src/util/getConfig.ts", "../../gridjs/src/view/htmlElement.tsx", "../../gridjs/src/util/html.ts", "../../gridjs/src/pipeline/processor.ts", "../../gridjs/src/cell.ts", "../../gridjs/src/row.ts", "../../gridjs/src/tabular.ts", "../../gridjs/src/util/array.ts", "../../gridjs/src/util/eventEmitter.ts", "../../gridjs/src/pipeline/filter/globalSearch.ts", "../../gridjs/src/operator/search.ts", "../../gridjs/src/util/className.ts", "../../gridjs/src/plugin.ts", "../../gridjs/src/view/base/store.ts", "../../gridjs/src/view/plugin/search/store.ts", "../../gridjs/src/view/base/actions.ts", "../../gridjs/src/view/plugin/search/actions.ts", "../../gridjs/src/pipeline/filter/serverGlobalSearch.ts", "../../gridjs/src/util/log.ts", "../../gridjs/src/view/plugin/search/search.tsx", "../../gridjs/src/util/debounce.ts", "../../gridjs/src/pipeline/limit/pagination.ts", "../../gridjs/src/pipeline/limit/serverPagination.ts", "../../gridjs/src/view/plugin/pagination.tsx", "../../gridjs/src/util/width.ts", "../../gridjs/src/view/table/shadow.tsx", "../../gridjs/src/util/string.ts", "../../gridjs/src/header.ts", "../../gridjs/src/util/dispatcher.ts", "../../gridjs/src/storage/storage.ts", "../../gridjs/src/storage/memory.ts", "../../gridjs/src/storage/server.ts", "../../gridjs/src/storage/storageUtils.ts", "../../gridjs/src/pipeline/pipeline.ts", "../../gridjs/src/types.ts", "../../gridjs/src/pipeline/extractor/storage.ts", "../../gridjs/src/pipeline/transformer/arrayToTabular.ts", "../../gridjs/src/pipeline/initiator/server.ts", "../../gridjs/src/pipeline/transformer/storageResponseToArray.ts", "../../gridjs/src/pipeline/pipelineUtils.ts", "../../gridjs/src/config.ts", "../../gridjs/node_modules/preact/hooks/dist/hooks.module.js", "../../gridjs/src/view/table/td.tsx", "../../gridjs/src/view/table/tr.tsx", "../../gridjs/src/view/table/messageRow.tsx", "../../gridjs/src/view/table/tbody.tsx", "../../gridjs/src/pipeline/sort/native.ts", "../../gridjs/src/view/plugin/sort/store.ts", "../../gridjs/src/view/plugin/sort/actions.ts", "../../gridjs/src/pipeline/sort/server.ts", "../../gridjs/src/view/plugin/sort/sort.tsx", "../../gridjs/src/view/plugin/resize/resize.tsx", "../../gridjs/src/util/throttle.ts", "../../gridjs/src/view/table/th.tsx", "../../gridjs/src/view/table/thead.tsx", "../../gridjs/src/util/table.ts", "../../gridjs/src/view/table/table.tsx", "../../gridjs/src/view/headerContainer.tsx", "../../gridjs/src/view/footerContainer.tsx", "../../gridjs/src/view/container.tsx", "../../gridjs/src/grid.ts"],
  "sourcesContent": ["var n,l,u,i,t,o,r,f={},e=[],c=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s(n,l){for(var u in l)n[u]=l[u];return n}function a(n){var l=n.parentNode;l&&l.removeChild(n)}function h(l,u,i){var t,o,r,f={};for(r in u)\"key\"==r?t=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),\"function\"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return v(l,f,t,o,null)}function v(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u:r};return null==r&&null!=l.vnode&&l.vnode(f),f}function y(){return{current:null}}function p(n){return n.children}function d(n,l){this.props=n,this.context=l}function _(n,l){if(null==l)return n.__?_(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?_(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function b(n){(!n.__d&&(n.__d=!0)&&t.push(n)&&!g.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||setTimeout)(g)}function g(){for(var n;g.__r=t.length;)n=t.sort(function(n,l){return n.__v.__b-l.__v.__b}),t=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=s({},t)).__v=t.__v+1,j(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?_(t):o,t.__h),z(u,t),t.__e!=o&&k(t)))})}function w(n,l,u,i,t,o,r,c,s,a){var h,y,d,k,b,g,w,x=i&&i.__k||e,C=x.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(k=u.__k[h]=null==(k=l[h])||\"boolean\"==typeof k?null:\"string\"==typeof k||\"number\"==typeof k||\"bigint\"==typeof k?v(null,k,null,null,k):Array.isArray(k)?v(p,{children:k},null,null,null):k.__b>0?v(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=x[h])||d&&k.key==d.key&&k.type===d.type)x[h]=void 0;else for(y=0;y<C;y++){if((d=x[y])&&k.key==d.key&&k.type===d.type){x[y]=void 0;break}d=null}j(n,k,d=d||f,t,o,r,c,s,a),b=k.__e,(y=k.ref)&&d.ref!=y&&(w||(w=[]),d.ref&&w.push(d.ref,null,k),w.push(y,k.__c||b,k)),null!=b?(null==g&&(g=b),\"function\"==typeof k.type&&k.__k===d.__k?k.__d=s=m(k,s,n):s=A(n,k,d,x,b,s),\"function\"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_(d))}for(u.__e=g,h=C;h--;)null!=x[h]&&(\"function\"==typeof u.type&&null!=x[h].__e&&x[h].__e==u.__d&&(u.__d=_(i,h+1)),N(x[h],x[h]));if(w)for(h=0;h<w.length;h++)M(w[h],w[++h],w[++h])}function m(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++)(i=t[o])&&(i.__=n,l=\"function\"==typeof i.type?m(i,l,u):A(u,i,i,t,i.__e,l));return l}function x(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(Array.isArray(n)?n.some(function(n){x(n,l)}):l.push(n)),l}function A(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o}return void 0!==r?r:t.nextSibling}function C(n,l,u,i,t){var o;for(o in u)\"children\"===o||\"key\"===o||o in l||H(n,o,null,u[o],i);for(o in l)t&&\"function\"!=typeof l[o]||\"children\"===o||\"key\"===o||\"value\"===o||\"checked\"===o||u[o]===l[o]||H(n,o,l[o],u[o],i)}function $(n,l,u){\"-\"===l[0]?n.setProperty(l,u):n[l]=null==u?\"\":\"number\"!=typeof u||c.test(l)?u:u+\"px\"}function H(n,l,u,i,t){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof i&&(n.style.cssText=i=\"\"),i)for(l in i)u&&l in u||$(n.style,l,\"\");if(u)for(l in u)i&&u[l]===i[l]||$(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/Capture$/,\"\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T:I,o):n.removeEventListener(l,o?T:I,o);else if(\"dangerouslySetInnerHTML\"!==l){if(t)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null!=u&&(!1!==u||\"a\"===l[0]&&\"r\"===l[1])?n.setAttribute(l,u):n.removeAttribute(l))}}function I(n){this.l[n.type+!1](l.event?l.event(n):n)}function T(n){this.l[n.type+!0](l.event?l.event(n):n)}function j(n,u,i,t,o,r,f,e,c){var a,h,v,y,_,k,b,g,m,x,A,C,$,H=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=l.__b)&&a(u);try{n:if(\"function\"==typeof H){if(g=u.props,m=(a=H.contextType)&&t[a.__c],x=a?m?m.props.value:a.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:(\"prototype\"in H&&H.prototype.render?u.__c=h=new H(g,x):(u.__c=h=new d(g,x),h.constructor=H,h.render=O),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=H.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=s({},h.__s)),s(h.__s,H.getDerivedStateFromProps(g,h.__s))),y=h.props,_=h.state,v)null==H.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==H.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){h.props=g,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u)}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,_,k)})}if(h.context=x,h.props=g,h.__v=u,h.__P=n,A=l.__r,C=0,\"prototype\"in H&&H.prototype.render)h.state=h.__s,h.__d=!1,A&&A(u),a=h.render(h.props,h.state,h.context);else do{h.__d=!1,A&&A(u),a=h.render(h.props,h.state,h.context),h.state=h.__s}while(h.__d&&++C<25);h.state=h.__s,null!=h.getChildContext&&(t=s(s({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,_)),$=null!=a&&a.type===p&&null==a.key?a.props.children:a,w(n,Array.isArray($)?$:[$],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L(i.__e,u,i,t,o,r,f,c);(a=l.diffed)&&a(u)}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l.__e(n,u,i)}}function z(n,u){l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function L(l,u,i,t,o,r,e,c){var s,h,v,y=i.props,p=u.props,d=u.type,k=0;if(\"svg\"===d&&(o=!0),null!=r)for(;k<r.length;k++)if((s=r[k])&&\"setAttribute\"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[k]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS(\"http://www.w3.org/2000/svg\",d):document.createElement(d,p.is&&p),r=null,c=!1}if(null===d)y===p||c&&l.data===p||(l.data=p);else{if(r=r&&n.call(l.childNodes),h=(y=i.props||f).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},k=0;k<l.attributes.length;k++)y[l.attributes[k].name]=l.attributes[k].value;(v||h)&&(v&&(h&&v.__html==h.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||\"\"))}if(C(l,p,y,o,c),v)u.__k=[];else if(k=u.props.children,w(l,Array.isArray(k)?k:[k],u,i,t,o&&\"foreignObject\"!==d,r,e,r?r[0]:i.__k&&_(i,0),c),null!=r)for(k=r.length;k--;)null!=r[k]&&a(r[k]);c||(\"value\"in p&&void 0!==(k=p.value)&&(k!==l.value||\"progress\"===d&&!k||\"option\"===d&&k!==y.value)&&H(l,\"value\",k,y.value,!1),\"checked\"in p&&void 0!==(k=p.checked)&&k!==l.checked&&H(l,\"checked\",k,y.checked,!1))}return l}function M(n,u,i){try{\"function\"==typeof n?n(u):n.current=u}catch(n){l.__e(n,i)}}function N(n,u,i){var t,o;if(l.unmount&&l.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount()}catch(n){l.__e(n,u)}t.base=t.__P=null}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N(t[o],u,\"function\"!=typeof n.type);i||null==n.__e||a(n.__e),n.__e=n.__d=void 0}function O(n,l,u){return this.constructor(n,u)}function P(u,i,t){var o,r,e;l.__&&l.__(u,i),r=(o=\"function\"==typeof t)?null:t&&t.__k||i.__k,e=[],j(i,u=(!o&&t||i).__k=h(p,null,[u]),r||f,f,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,e,!o&&t?t:r?r.__e:i.firstChild,o),z(e,u)}function S(n,l){P(n,l,S)}function q(l,u,i){var t,o,r,f=s({},l.props);for(r in u)\"key\"==r?t=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),v(l.type,f,t||l.key,o||l.ref,null)}function B(n,l){var u={__c:l=\"__cC\"+r++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(b)},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=e.slice,l={__e:function(n,l,u,i){for(var t,o,r;l=l.__;)if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t}catch(l){n=l}throw n}},u=0,i=function(n){return null!=n&&void 0===n.constructor},d.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s({},this.state),\"function\"==typeof n&&(n=n(s({},u),this.props)),n&&s(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),b(this))},d.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),b(this))},d.prototype.render=p,t=[],g.__r=0,r=0;export{P as render,S as hydrate,h as createElement,h,p as Fragment,y as createRef,i as isValidElement,d as Component,q as cloneElement,B as createContext,x as toChildArray,l as options};\n//# sourceMappingURL=preact.module.js.map\n", "export type ID = string;\n\nexport function generateUUID(): ID {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import { generateUUID, ID } from './util/id';\n\nclass Base {\n  private readonly _id: ID;\n\n  constructor(id?: ID) {\n    this._id = id || generateUUID();\n  }\n\n  get id(): ID {\n    return this._id;\n  }\n}\n\nexport default Base;\n", "export default {\n  search: {\n    placeholder: 'Type a keyword...',\n  },\n  sort: {\n    sortAsc: 'Sort column ascending',\n    sortDesc: 'Sort column descending',\n  },\n  pagination: {\n    previous: 'Previous',\n    next: 'Next',\n    navigate: (page, pages) => `Page ${page} of ${pages}`,\n    page: (page) => `Page ${page}`,\n    showing: 'Showing',\n    of: 'of',\n    to: 'to',\n    results: 'results',\n  },\n  loading: 'Loading...',\n  noRecordsFound: 'No matching records found',\n  error: 'An error happened while fetching the data',\n};\n", "import enUS from './en_US';\ntype MessageFormat = (...args) => string;\ntype Message = string | MessageFormat;\nexport type Language = { [key: string]: Message | Language };\n\nexport class Translator {\n  private readonly _language: Language;\n  private readonly _defaultLanguage: Language;\n\n  constructor(language?: Language) {\n    this._language = language;\n    this._defaultLanguage = enUS;\n  }\n\n  /**\n   * Tries to split the message with \".\" and find\n   * the key in the given language\n   *\n   * @param message\n   * @param lang\n   */\n  getString(message: string, lang: Language): MessageFormat {\n    if (!lang || !message) return null;\n\n    const splitted = message.split('.');\n    const key = splitted[0];\n\n    if (lang[key]) {\n      const val = lang[key];\n\n      if (typeof val === 'string') {\n        return (): string => val;\n      } else if (typeof val === 'function') {\n        return val;\n      } else {\n        return this.getString(splitted.slice(1).join('.'), val);\n      }\n    }\n\n    return null;\n  }\n\n  translate(message: string, ...args): string {\n    const translated = this.getString(message, this._language);\n    let messageFormat;\n\n    if (translated) {\n      messageFormat = translated;\n    } else {\n      messageFormat = this.getString(message, this._defaultLanguage);\n    }\n\n    if (messageFormat) {\n      return messageFormat(...args);\n    }\n\n    return message;\n  }\n}\n\nexport function useTranslator(translator: Translator) {\n  return function (message: string, ...args): string {\n    return translator.translate(message, ...args);\n  };\n}\n", "import { Component } from 'preact';\nimport { Config } from '../config';\nimport getConfig from '../util/getConfig';\nimport { useTranslator } from '../i18n/language';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseProps {}\n\nexport abstract class BaseComponent<\n  P extends BaseProps = unknown,\n  S = unknown,\n> extends Component<P, S> {\n  protected config: Config;\n  protected _: (message: string, ...args) => string;\n\n  constructor(props: P, context: any) {\n    super(props, context);\n    this.config = getConfig(context);\n\n    if (this.config) {\n      this._ = useTranslator(this.config.translator);\n    }\n  }\n}\n\nexport interface BaseComponent<P> {\n  new (props: P, context?: any): Component<P>;\n}\n", "import { Context } from 'preact';\nimport { Config } from '../config';\n\n/**\n * This is a hack to get the current global config from Preact context.\n * My assumption is that we only need one global context which is the ConfigContext\n *\n * @param context\n */\nexport default function getConfig(context: {\n  [key: string]: Context<any>;\n}): Config {\n  if (!context) return null;\n\n  const keys = Object.keys(context);\n\n  if (keys.length) {\n    // TODO: can we use a better way to capture and return the Config context?\n    const ctx: any = context[keys[0]];\n    return ctx.props.value;\n  }\n\n  return null;\n}\n", "import { h } from 'preact';\n\nimport { BaseComponent, BaseProps } from './base';\n\nexport interface HTMLContentProps extends BaseProps {\n  content: string;\n  parentElement?: string;\n}\n\nexport class HTMLElement extends BaseComponent<HTMLContentProps> {\n  static defaultProps = {\n    parentElement: 'span',\n  };\n\n  render() {\n    return h(this.props.parentElement, {\n      dangerouslySetInnerHTML: { __html: this.props.content },\n    });\n  }\n}\n", "import { h, VNode } from 'preact';\nimport { HTMLElement } from '../view/htmlElement';\n\nexport function decode(content: string): string {\n  const value = new DOMParser().parseFromString(content, 'text/html');\n  return value.documentElement.textContent;\n}\n\nexport function html(content: string, parentElement?: string): VNode {\n  return h(HTMLElement, { content: content, parentElement: parentElement });\n}\n", "// The order of enum items define the processing order of the processor type\n// e.g. Extractor = 0 will be processed before Transformer = 1\nimport { generateUUID, ID } from '../util/id';\nimport { EventEmitter } from '../util/eventEmitter';\n\nexport enum ProcessorType {\n  Initiator,\n  ServerFilter,\n  ServerSort,\n  ServerLimit,\n  Extractor,\n  Transformer,\n  Filter,\n  Sort,\n  Limit,\n}\n\ninterface PipelineProcessorEvents<T, P> {\n  propsUpdated: (processor: PipelineProcessor<T, P>) => void;\n  beforeProcess: (...args) => void;\n  afterProcess: (...args) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PipelineProcessorProps {}\n\nexport abstract class PipelineProcessor<\n  T,\n  P extends Partial<PipelineProcessorProps>,\n> extends EventEmitter<PipelineProcessorEvents<T, P>> {\n  public readonly id: ID;\n  private readonly _props: P;\n\n  abstract get type(): ProcessorType;\n  protected abstract _process(...args): T | Promise<T>;\n  protected validateProps?(...args): void;\n\n  constructor(props?: Partial<P>) {\n    super();\n\n    this._props = {} as P;\n    this.id = generateUUID();\n\n    if (props) this.setProps(props);\n  }\n\n  /**\n   * process is used to call beforeProcess and afterProcess callbacks\n   * This function is just a wrapper that calls _process()\n   *\n   * @param args\n   */\n  process(...args): T | Promise<T> {\n    if (this.validateProps instanceof Function) {\n      this.validateProps(...args);\n    }\n\n    this.emit('beforeProcess', ...args);\n    const result = this._process(...args);\n    this.emit('afterProcess', ...args);\n    return result;\n  }\n\n  setProps(props: Partial<P>): this {\n    Object.assign(this._props, props);\n    this.emit('propsUpdated', this);\n    return this;\n  }\n\n  get props(): P {\n    return this._props;\n  }\n}\n", "import Base from './base';\nimport { TCell } from './types';\nimport { html } from './util/html';\nimport { ComponentChild } from 'preact';\n\nclass Cell extends Base {\n  // because a Cell is a subset of TCell type\n  public data: number | string | boolean | ComponentChild;\n\n  constructor(data: TCell) {\n    super();\n\n    this.update(data);\n  }\n\n  private cast(data: TCell): number | string | boolean | ComponentChild {\n    if (data instanceof HTMLElement) {\n      return html(data.outerHTML);\n    }\n\n    return data;\n  }\n\n  /**\n   * Updates the Cell's data\n   *\n   * @param data\n   */\n  public update(data: TCell): Cell {\n    this.data = this.cast(data);\n    return this;\n  }\n}\n\nexport default Cell;\n", "import Cell from './cell';\nimport Base from './base';\nimport { TCell } from './types';\n\nclass Row extends Base {\n  private _cells: Cell[];\n\n  constructor(cells?: Cell[]) {\n    super();\n\n    this.cells = cells || [];\n  }\n\n  public cell(index: number): Cell {\n    return this._cells[index];\n  }\n\n  public get cells(): Cell[] {\n    return this._cells;\n  }\n\n  public set cells(cells: Cell[]) {\n    this._cells = cells;\n  }\n\n  public toArray(): TCell[] {\n    return this.cells.map((cell) => cell.data);\n  }\n\n  /**\n   * Creates a new Row from an array of Cell(s)\n   * This method generates a new ID for the Row and all nested elements\n   *\n   * @param cells\n   * @returns Row\n   */\n  static fromCells(cells: Cell[]): Row {\n    return new Row(cells.map((cell) => new Cell(cell.data)));\n  }\n\n  get length(): number {\n    return this.cells.length;\n  }\n}\n\nexport default Row;\n", "import Base from './base';\nimport Row from './row';\nimport Cell from './cell';\nimport { OneDArray, TCell, TwoDArray } from './types';\nimport { oneDtoTwoD } from './util/array';\n\nclass Tabular extends Base {\n  private _rows: Row[];\n  private _length: number;\n\n  constructor(rows?: Row[] | Row) {\n    super();\n\n    if (rows instanceof Array) {\n      this.rows = rows;\n    } else if (rows instanceof Row) {\n      this.rows = [rows];\n    } else {\n      this.rows = [];\n    }\n  }\n\n  get rows(): Row[] {\n    return this._rows;\n  }\n\n  set rows(rows: Row[]) {\n    this._rows = rows;\n  }\n\n  get length(): number {\n    return this._length || this.rows.length;\n  }\n\n  // we want to sent the length when storage is ServerStorage\n  set length(len: number) {\n    this._length = len;\n  }\n\n  public toArray(): TCell[][] {\n    return this.rows.map((row) => row.toArray());\n  }\n\n  /**\n   * Creates a new Tabular from an array of Row(s)\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param rows\n   * @returns Tabular\n   */\n  static fromRows(rows: Row[]): Tabular {\n    return new Tabular(rows.map((row) => Row.fromCells(row.cells)));\n  }\n\n  /**\n   * Creates a new Tabular from a 2D array\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param data\n   * @returns Tabular\n   */\n  static fromArray<T extends TCell>(\n    data: OneDArray<T> | TwoDArray<T>,\n  ): Tabular {\n    data = oneDtoTwoD(data);\n\n    return new Tabular(\n      data.map((row) => new Row(row.map((cell) => new Cell(cell)))),\n    );\n  }\n}\n\nexport default Tabular;\n", "import { OneDArray, TwoDArray } from '../types';\n\nexport function oneDtoTwoD<T>(data: OneDArray<T> | TwoDArray<T>): TwoDArray<T> {\n  if (data[0] && !(data[0] instanceof Array)) {\n    return [data] as TwoDArray<T>;\n  }\n\n  return data as TwoDArray<T>;\n}\n\nexport function flatten<T>(arrays: TwoDArray<T>): OneDArray<T> {\n  return arrays.reduce((prev, x) => prev.concat(x), []);\n}\n", "type EventArgs<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\n/**\n * Example:\n *\n * export interface BaseEvents<P, S> {\n *   SET_STATE: (component: BaseComponent<P, S>, state: S) => void;\n * }\n */\n\nexport interface EventEmitter<EventTypes> {\n  addListener<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean;\n}\n\nexport class EventEmitter<EventTypes> {\n  private callbacks: { [event: string]: ((...args) => void)[] };\n\n  // because we are using EventEmitter as a mixin and the\n  // constructor won't be called by the applyMixins function\n  // see src/base.ts and src/util/applyMixin.ts\n  private init(event?: string): void {\n    if (!this.callbacks) {\n      this.callbacks = {};\n    }\n\n    if (event && !this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n  }\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    this.init(event as string);\n    this.callbacks[event as string].push(listener);\n    return this;\n  }\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    const eventName = event as string;\n\n    this.init();\n\n    if (!this.callbacks[eventName] || this.callbacks[eventName].length === 0) {\n      // there is no callbacks with this key\n      return this;\n    }\n\n    this.callbacks[eventName] = this.callbacks[eventName].filter(\n      (value) => value != listener,\n    );\n\n    return this;\n  }\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean {\n    const eventName = event as string;\n\n    this.init(eventName);\n\n    if (this.callbacks[eventName].length > 0) {\n      this.callbacks[eventName].forEach((value) => value(...args));\n      return true;\n    }\n\n    return false;\n  }\n}\n", "import search from '../../operator/search';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { OneDArray, TCell, TColumn } from '../../types';\n\ninterface GlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword: string;\n  columns: OneDArray<TColumn>;\n  ignoreHiddenColumns: boolean;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n}\n\nclass GlobalSearchFilter extends PipelineProcessor<\n  Tabular,\n  GlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Filter;\n  }\n\n  _process(data: Tabular): Tabular {\n    if (this.props.keyword) {\n      return search(\n        String(this.props.keyword).trim(),\n        this.props.columns,\n        this.props.ignoreHiddenColumns,\n        data,\n        this.props.selector,\n      );\n    }\n\n    return data;\n  }\n}\n\nexport default GlobalSearchFilter;\n", "import Tabular from '../tabular';\nimport { VNode } from 'preact';\nimport { HTMLContentProps } from '../view/htmlElement';\nimport { OneDArray, TCell, TColumn } from '../types';\n\nexport default function (\n  keyword: string,\n  columns: OneDArray<TColumn>,\n  ignoreHiddenColumns: boolean,\n  tabular: Tabular,\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string,\n): Tabular {\n  // escape special regex chars\n  keyword = keyword.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\n  return new Tabular(\n    tabular.rows.filter((row, rowIndex) =>\n      row.cells.some((cell, cellIndex) => {\n        if (!cell) {\n          return false;\n        }\n\n        if (ignoreHiddenColumns) {\n          if (\n            columns &&\n            columns[cellIndex] &&\n            typeof columns[cellIndex] === 'object'\n          ) {\n            const typedColumn = columns[cellIndex] as TColumn;\n            if (typedColumn.hidden) {\n              return false;\n            }\n          }\n        }\n\n        let data = '';\n\n        if (typeof selector === 'function') {\n          data = selector(cell.data, rowIndex, cellIndex);\n        } else if (typeof cell.data === 'object') {\n          // HTMLContent element\n          const element = cell.data as VNode<HTMLContentProps>;\n          if (element && element.props && element.props.content) {\n            // TODO: we should only search in the content of the element. props.content is the entire HTML element\n            data = element.props.content;\n          }\n        } else {\n          // primitive types\n          data = String(cell.data);\n        }\n\n        return new RegExp(keyword, 'gi').test(data);\n      }),\n    ),\n  );\n}\n", "export function className(...args: string[]): string {\n  const prefix = 'gridjs';\n\n  return `${prefix}${args.reduce(\n    (prev: string, cur: string) => `${prev}-${cur}`,\n    '',\n  )}`;\n}\n\nexport function classJoin(...classNames: string[]): string {\n  return (\n    classNames\n      .filter((x) => x)\n      .reduce((className, prev) => `${className || ''} ${prev}`, '')\n      .trim() || null\n  );\n}\n", "import { BaseComponent, BaseProps } from './view/base';\nimport { Component, ComponentProps, Fragment, h } from 'preact';\nimport log from './util/log';\n\n/**\n * BaseProps for all plugins\n */\nexport interface PluginBaseProps<T extends PluginBaseComponentCtor> {\n  plugin: Plugin<T>;\n}\n\n/**\n * BaseComponent for all plugins\n */\nexport abstract class PluginBaseComponent<\n  P extends PluginBaseProps<any> = any,\n  S = unknown,\n> extends BaseComponent<P, S> {}\n\nexport interface PluginBaseComponentCtor<\n  P extends PluginBaseProps<any> = any,\n  S = unknown,\n> {\n  new (props: P, context?: any): Component<P, S>;\n}\n\nexport enum PluginPosition {\n  Header,\n  Footer,\n  Cell,\n}\n\nexport interface Plugin<T extends PluginBaseComponentCtor> {\n  id: string;\n  position: PluginPosition;\n  component: T;\n  props?: Partial<ComponentProps<T>>;\n  order?: number;\n}\n\nexport class PluginManager {\n  private readonly plugins: Plugin<any>[];\n\n  constructor() {\n    this.plugins = [];\n  }\n\n  get<T extends PluginBaseComponentCtor>(id: string): Plugin<T> | null {\n    const plugins = this.plugins.filter((p) => p.id === id);\n\n    if (plugins.length > 0) {\n      return plugins[0];\n    }\n\n    return null;\n  }\n\n  add<T extends PluginBaseComponentCtor>(plugin: Plugin<T>): this {\n    if (!plugin.id) {\n      log.error('Plugin ID cannot be empty');\n      return this;\n    }\n\n    if (this.get(plugin.id) !== null) {\n      log.error(`Duplicate plugin ID: ${plugin.id}`);\n      return this;\n    }\n\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  remove(id: string): this {\n    this.plugins.splice(this.plugins.indexOf(this.get(id)), 1);\n    return this;\n  }\n\n  list<T extends PluginBaseComponentCtor>(\n    position?: PluginPosition,\n  ): Plugin<T>[] {\n    let plugins: Plugin<T>[];\n\n    if (position != null || position != undefined) {\n      plugins = this.plugins.filter((p) => p.position === position);\n    } else {\n      plugins = this.plugins;\n    }\n\n    return plugins.sort((a, b) => a.order - b.order);\n  }\n}\n\nexport interface PluginRendererProps extends BaseProps {\n  props?: any;\n  // to render a single plugin\n  pluginId?: string;\n  // to render all plugins in this PluginPosition\n  position?: PluginPosition;\n}\n\nexport class PluginRenderer extends BaseComponent<PluginRendererProps> {\n  render() {\n    if (this.props.pluginId) {\n      // render a single plugin\n      const plugin = this.config.plugin.get(this.props.pluginId);\n\n      if (!plugin) return null;\n\n      return h(\n        Fragment,\n        {},\n        h(plugin.component, {\n          plugin: plugin,\n          ...plugin.props,\n          ...this.props.props,\n        }),\n      );\n    } else if (this.props.position !== undefined) {\n      // render using a specific plugin position\n      return h(\n        Fragment,\n        {},\n        this.config.plugin\n          .list(this.props.position)\n          .map((p) =>\n            h(p.component, { plugin: p, ...p.props, ...this.props.props }),\n          ),\n      );\n    }\n\n    return null;\n  }\n}\n", "import { EventEmitter } from '../../util/eventEmitter';\nimport Dispatcher from '../../util/dispatcher';\n\ninterface BaseStoreEvents<STATE> {\n  updated: (newState: STATE, prevState?: STATE) => void;\n}\n\nexport default abstract class BaseStore<STATE, ACTIONS> extends EventEmitter<\n  BaseStoreEvents<STATE>\n> {\n  private _state: STATE;\n  protected readonly dispatcher: Dispatcher<any>;\n\n  constructor(dispatcher: Dispatcher<any>) {\n    super();\n    this.dispatcher = dispatcher;\n    this._state = this.getInitialState();\n    dispatcher.register(this._handle.bind(this));\n  }\n\n  abstract handle<K extends keyof ACTIONS>(type: K, payload: ACTIONS[K]): void;\n  abstract getInitialState(): STATE;\n\n  private _handle(action): void {\n    this.handle(action.type, action.payload);\n  }\n\n  setState(newState: STATE): void {\n    const prevState = this._state;\n    this._state = newState;\n    this.emit('updated', newState, prevState);\n  }\n\n  get state(): STATE {\n    return this._state;\n  }\n}\n", "import BaseStore from '../../base/store';\nimport { SearchActionsType } from './actions';\n\nexport type SearchStoreState = { keyword: string | null };\n\nexport class SearchStore extends BaseStore<\n  SearchStoreState,\n  SearchActionsType\n> {\n  getInitialState(): SearchStoreState {\n    return { keyword: null };\n  }\n\n  handle(type, payload): void {\n    if (type === 'SEARCH_KEYWORD') {\n      const { keyword } = payload;\n      this.search(keyword);\n    }\n  }\n\n  private search(keyword: string): void {\n    this.setState({ keyword: keyword });\n  }\n}\n", "import Dispatcher from '../../util/dispatcher';\n\nexport abstract class BaseActions<ACTIONS> {\n  private readonly dispatcher: Dispatcher<any>;\n\n  constructor(dispatcher: Dispatcher<any>) {\n    this.dispatcher = dispatcher;\n  }\n\n  protected dispatch<K extends keyof ACTIONS>(\n    type: K,\n    payload: ACTIONS[K],\n  ): void {\n    this.dispatcher.dispatch({\n      type: type,\n      payload: payload,\n    });\n  }\n}\n", "import { BaseActions } from '../../base/actions';\n\nexport interface SearchActionsType {\n  SEARCH_KEYWORD: {\n    keyword: string;\n  };\n}\n\nexport class SearchActions extends BaseActions<SearchActionsType> {\n  search(keyword: string): void {\n    this.dispatch('SEARCH_KEYWORD', {\n      keyword: keyword,\n    });\n  }\n}\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerGlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword?: string;\n  url?: (prevUrl: string, keyword: string) => string;\n  body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n}\n\nclass ServerGlobalSearchFilter extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerGlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerFilter;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    if (!this.props.keyword) return options;\n\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.keyword);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.keyword);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerGlobalSearchFilter;\n", "/**\n * Centralized logging lib\n *\n * This class needs some improvements but so far it has been used to have a coherent way to log\n */\nclass Logger {\n  private format(message: string, type: string): string {\n    return `[Grid.js] [${type.toUpperCase()}]: ${message}`;\n  }\n\n  error(message: string, throwException = false): void {\n    const msg = this.format(message, 'error');\n\n    if (throwException) {\n      throw Error(msg);\n    } else {\n      console.error(msg);\n    }\n  }\n\n  warn(message: string): void {\n    console.warn(this.format(message, 'warn'));\n  }\n\n  info(message: string): void {\n    console.info(this.format(message, 'info'));\n  }\n}\n\nexport default new Logger();\n", "import { h } from 'preact';\nimport GlobalSearchFilter from '../../../pipeline/filter/globalSearch';\nimport { classJoin, className } from '../../../util/className';\nimport { SearchStore, SearchStoreState } from './store';\nimport { SearchActions } from './actions';\nimport ServerGlobalSearchFilter from '../../../pipeline/filter/serverGlobalSearch';\nimport { debounce } from '../../../util/debounce';\nimport { TCell } from '../../../types';\nimport { PluginBaseComponent, PluginBaseProps } from '../../../plugin';\n\nexport interface SearchConfig {\n  keyword?: string;\n  enabled?: boolean;\n  ignoreHiddenColumns?: boolean;\n  debounceTimeout?: number;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n  server?: {\n    url?: (prevUrl: string, keyword: string) => string;\n    body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n  };\n}\n\nexport class Search extends PluginBaseComponent<\n  SearchConfig & PluginBaseProps<Search>\n> {\n  private readonly searchProcessor:\n    | GlobalSearchFilter\n    | ServerGlobalSearchFilter;\n  private readonly actions: SearchActions;\n  private readonly store: SearchStore;\n  private readonly storeUpdatedFn: (...args) => void;\n\n  static defaultProps = {\n    debounceTimeout: 250,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.actions = new SearchActions(this.config.dispatcher);\n    this.store = new SearchStore(this.config.dispatcher);\n    const { enabled, keyword } = props;\n\n    if (enabled) {\n      // initial search\n      if (keyword) this.actions.search(keyword);\n\n      this.storeUpdatedFn = this.storeUpdated.bind(this);\n      this.store.on('updated', this.storeUpdatedFn);\n\n      let searchProcessor;\n      if (props.server) {\n        searchProcessor = new ServerGlobalSearchFilter({\n          keyword: props.keyword,\n          url: props.server.url,\n          body: props.server.body,\n        });\n      } else {\n        searchProcessor = new GlobalSearchFilter({\n          keyword: props.keyword,\n          columns: this.config.header && this.config.header.columns,\n          ignoreHiddenColumns:\n            props.ignoreHiddenColumns ||\n            props.ignoreHiddenColumns === undefined,\n          selector: props.selector,\n        });\n      }\n\n      this.searchProcessor = searchProcessor;\n\n      // adds a new processor to the pipeline\n      this.config.pipeline.register(searchProcessor);\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.config.pipeline.unregister(this.searchProcessor);\n    this.store.off('updated', this.storeUpdatedFn);\n  }\n\n  private storeUpdated(state: SearchStoreState): void {\n    // updates the processor state\n    this.searchProcessor.setProps({\n      keyword: state.keyword,\n    });\n  }\n\n  private onChange(event): void {\n    const keyword = event.target.value;\n    this.actions.search(keyword);\n  }\n\n  render() {\n    if (!this.props.enabled) return null;\n\n    let onInput = this.onChange.bind(this);\n\n    // add debounce to input only if it's a server-side search\n    if (this.searchProcessor instanceof ServerGlobalSearchFilter) {\n      onInput = debounce(onInput, this.props.debounceTimeout);\n    }\n\n    return (\n      <div\n        className={className(classJoin('search', this.config.className.search))}\n      >\n        <input\n          type=\"search\"\n          placeholder={this._('search.placeholder')}\n          aria-label={this._('search.placeholder')}\n          onInput={onInput}\n          className={classJoin(\n            className('input'),\n            className('search', 'input'),\n          )}\n          value={this.store.state.keyword}\n        />\n      </div>\n    );\n  }\n}\n", "export const debounce = <F extends (...args: any[]) => any>(\n  func: F,\n  waitFor: number,\n) => {\n  let timeout;\n\n  return (...args: Parameters<F>): Promise<ReturnType<F>> =>\n    new Promise((resolve) => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => resolve(func(...args)), waitFor);\n    });\n};\n", "import Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface PaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n}\n\nclass PaginationLimit extends PipelineProcessor<Tabular, PaginationLimitProps> {\n  protected validateProps(): void {\n    if (isNaN(Number(this.props.limit)) || isNaN(Number(this.props.page))) {\n      throw Error('Invalid parameters passed');\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Limit;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const page = this.props.page;\n    const start = page * this.props.limit;\n    const end = (page + 1) * this.props.limit;\n\n    return new Tabular(data.rows.slice(start, end));\n  }\n}\n\nexport default PaginationLimit;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerPaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n  url?: (prevUrl: string, page: number, limit: number) => string;\n  body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n}\n\nclass ServerPaginationLimit extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerPaginationLimitProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerLimit;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(\n        options.url,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(\n        options.body,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerPaginationLimit;\n", "import { h, Fragment } from 'preact';\nimport PaginationLimit from '../../pipeline/limit/pagination';\nimport { classJoin, className } from '../../util/className';\nimport ServerPaginationLimit from '../../pipeline/limit/serverPagination';\nimport Tabular from '../../tabular';\nimport { PipelineProcessor } from '../../pipeline/processor';\nimport { PluginBaseComponent, PluginBaseProps } from '../../plugin';\n\ninterface PaginationState {\n  page: number;\n  limit?: number;\n  total: number;\n}\n\nexport interface PaginationConfig {\n  enabled: boolean;\n  limit?: number;\n  page?: number;\n  summary?: boolean;\n  nextButton?: boolean;\n  prevButton?: boolean;\n  buttonsCount?: number;\n  resetPageOnUpdate?: boolean;\n  server?: {\n    url?: (prevUrl: string, page: number, limit: number) => string;\n    body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n  };\n}\n\nexport class Pagination extends PluginBaseComponent<\n  PluginBaseProps<Pagination> & PaginationConfig,\n  PaginationState\n> {\n  private processor: PaginationLimit | ServerPaginationLimit;\n  private onUpdateFn: (processor: PipelineProcessor<any, any>) => void;\n  private setTotalFromTabularFn: (tabular: Tabular) => void;\n\n  static defaultProps = {\n    summary: true,\n    nextButton: true,\n    prevButton: true,\n    buttonsCount: 3,\n    limit: 10,\n    resetPageOnUpdate: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      limit: props.limit,\n      page: props.page || 0,\n      total: 0,\n    };\n  }\n\n  componentWillMount(): void {\n    if (this.props.enabled) {\n      let processor;\n\n      this.setTotalFromTabularFn = this.setTotalFromTabular.bind(this);\n\n      if (this.props.server) {\n        processor = new ServerPaginationLimit({\n          limit: this.state.limit,\n          page: this.state.page,\n          url: this.props.server.url,\n          body: this.props.server.body,\n        });\n\n        this.config.pipeline.on('afterProcess', this.setTotalFromTabularFn);\n      } else {\n        processor = new PaginationLimit({\n          limit: this.state.limit,\n          page: this.state.page,\n        });\n\n        // Pagination (all Limit processors) is the last step in the pipeline\n        // and we assume that at this stage, we have the rows that we care about.\n        // Let's grab the rows before processing Pagination and set total number of rows\n        processor.on('beforeProcess', this.setTotalFromTabularFn);\n      }\n\n      this.processor = processor;\n      this.config.pipeline.register(processor);\n\n      // we need to make sure that the state is set\n      // to the default props when an error happens\n      this.config.pipeline.on('error', () => {\n        this.setState({\n          total: 0,\n          page: 0,\n        });\n      });\n    }\n  }\n\n  private setTotalFromTabular(tabular: Tabular): void {\n    this.setTotal(tabular.length);\n  }\n\n  private onUpdate(processor): void {\n    // this is to ensure that the current page is set to 0\n    // when a processor is updated for some reason\n    if (this.props.resetPageOnUpdate && processor !== this.processor) {\n      this.setPage(0);\n    }\n  }\n\n  componentDidMount(): void {\n    this.onUpdateFn = this.onUpdate.bind(this);\n    this.config.pipeline.on('updated', this.onUpdateFn);\n  }\n\n  componentWillUnmount() {\n    this.config.pipeline.unregister(this.processor);\n    this.config.pipeline.off('updated', this.onUpdateFn);\n  }\n\n  private get pages(): number {\n    return Math.ceil(this.state.total / this.state.limit);\n  }\n\n  private setPage(page: number): void {\n    if (page >= this.pages || page < 0 || page === this.state.page) {\n      return null;\n    }\n\n    this.setState({\n      page: page,\n    });\n\n    this.processor.setProps({\n      page: page,\n    });\n  }\n\n  private setTotal(totalRows: number): void {\n    // to set the correct total number of rows\n    // when running in-memory operations\n    this.setState({\n      total: totalRows,\n    });\n  }\n\n  renderPages() {\n    if (this.props.buttonsCount <= 0) {\n      return null;\n    }\n\n    // how many pagination buttons to render?\n    const maxCount: number = Math.min(this.pages, this.props.buttonsCount);\n\n    let pagePivot = Math.min(this.state.page, Math.floor(maxCount / 2));\n    if (this.state.page + Math.floor(maxCount / 2) >= this.pages) {\n      pagePivot = maxCount - (this.pages - this.state.page);\n    }\n\n    return (\n      <Fragment>\n        {this.pages > maxCount && this.state.page - pagePivot > 0 && (\n          <Fragment>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, 0)}\n              title={this._('pagination.firstPage')}\n              aria-label={this._('pagination.firstPage')}\n              className={this.config.className.paginationButton}\n            >\n              {this._('1')}\n            </button>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                this.config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n          </Fragment>\n        )}\n\n        {Array.from(Array(maxCount).keys())\n          .map((i) => this.state.page + (i - pagePivot))\n          .map((i) => (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, i)}\n              className={classJoin(\n                this.state.page === i\n                  ? classJoin(\n                      className('currentPage'),\n                      this.config.className.paginationButtonCurrent,\n                    )\n                  : null,\n                this.config.className.paginationButton,\n              )}\n              title={this._('pagination.page', i + 1)}\n              aria-label={this._('pagination.page', i + 1)}\n            >\n              {this._(`${i + 1}`)}\n            </button>\n          ))}\n\n        {this.pages > maxCount && this.pages > this.state.page + pagePivot + 1 && (\n          <Fragment>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                this.config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, this.pages - 1)}\n              title={this._('pagination.page', this.pages)}\n              aria-label={this._('pagination.page', this.pages)}\n              className={this.config.className.paginationButton}\n            >\n              {this._(`${this.pages}`)}\n            </button>\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  }\n\n  renderSummary() {\n    return (\n      <Fragment>\n        {this.props.summary && this.state.total > 0 && (\n          <div\n            role=\"status\"\n            aria-live=\"polite\"\n            className={classJoin(\n              className('summary'),\n              this.config.className.paginationSummary,\n            )}\n            title={this._(\n              'pagination.navigate',\n              this.state.page + 1,\n              this.pages,\n            )}\n          >\n            {this._('pagination.showing')}{' '}\n            <b>{this._(`${this.state.page * this.state.limit + 1}`)}</b>{' '}\n            {this._('pagination.to')}{' '}\n            <b>\n              {this._(\n                `${Math.min(\n                  (this.state.page + 1) * this.state.limit,\n                  this.state.total,\n                )}`,\n              )}\n            </b>{' '}\n            {this._('pagination.of')} <b>{this._(`${this.state.total}`)}</b>{' '}\n            {this._('pagination.results')}\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n\n  render() {\n    if (!this.props.enabled) return null;\n\n    return (\n      <div\n        className={classJoin(\n          className('pagination'),\n          this.config.className.pagination,\n        )}\n      >\n        {this.renderSummary()}\n\n        <div className={className('pages')}>\n          {this.props.prevButton && (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              disabled={this.state.page === 0}\n              onClick={this.setPage.bind(this, this.state.page - 1)}\n              title={this._('pagination.previous')}\n              aria-label={this._('pagination.previous')}\n              className={classJoin(\n                this.config.className.paginationButton,\n                this.config.className.paginationButtonPrev,\n              )}\n            >\n              {this._('pagination.previous')}\n            </button>\n          )}\n\n          {this.renderPages()}\n\n          {this.props.nextButton && (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              disabled={this.pages === this.state.page + 1 || this.pages === 0}\n              onClick={this.setPage.bind(this, this.state.page + 1)}\n              title={this._('pagination.next')}\n              aria-label={this._('pagination.next')}\n              className={classJoin(\n                this.config.className.paginationButton,\n                this.config.className.paginationButtonNext,\n              )}\n            >\n              {this._('pagination.next')}\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n", "export function width(width: string | number, containerWidth?: number): number {\n  if (typeof width == 'string') {\n    if (width.indexOf('%') > -1) {\n      return (containerWidth / 100) * parseInt(width, 10);\n    } else {\n      return parseInt(width, 10);\n    }\n  }\n\n  return width;\n}\n\nexport function px(width: number): string {\n  if (!width) return '';\n  return `${Math.floor(width)}px`;\n}\n", "import { Component, h, RefObject } from 'preact';\nimport { BaseComponent, BaseProps } from '../base';\nimport { className } from '../../util/className';\n\ninterface ShadowTableProps extends BaseProps {\n  tableRef?: RefObject<Component>;\n}\n\n/**\n * ShadowTable renders a hidden table and is used to calculate the column's width\n * when autoWidth option is enabled\n */\nexport class ShadowTable extends BaseComponent<ShadowTableProps> {\n  private tableElement: HTMLTableElement;\n  private tableClassName: string;\n  private tableStyle: string;\n\n  constructor(props, context) {\n    super(props, context);\n\n    const tableRef = this.props.tableRef;\n    this.tableElement = tableRef.current.base.cloneNode(\n      true,\n    ) as HTMLTableElement;\n\n    this.tableElement.style.position = 'absolute';\n    this.tableElement.style.width = '100%';\n    this.tableElement.style.zIndex = '-2147483640';\n    this.tableElement.style.visibility = 'hidden';\n\n    this.tableClassName = this.tableElement.className;\n    this.tableStyle = this.tableElement.style.cssText;\n  }\n\n  public widths(): { [columnId: string]: { minWidth: number; width: number } } {\n    this.tableElement.className = `${this.tableClassName} ${className(\n      'shadowTable',\n    )}`;\n\n    this.tableElement.style.tableLayout = 'auto';\n    this.tableElement.style.width = 'auto';\n    this.tableElement.style.padding = '0';\n    this.tableElement.style.margin = '0';\n    this.tableElement.style.border = 'none';\n    this.tableElement.style.outline = 'none';\n\n    let obj = Array.from(\n      this.base.parentNode.querySelectorAll<HTMLElement>('thead th'),\n    ).reduce((prev, current) => {\n      current.style.width = `${current.clientWidth}px`;\n\n      return {\n        [current.getAttribute('data-column-id')]: {\n          minWidth: current.clientWidth,\n        },\n        ...prev,\n      };\n    }, {});\n\n    this.tableElement.className = this.tableClassName;\n    this.tableElement.style.cssText = this.tableStyle;\n    this.tableElement.style.tableLayout = 'auto';\n\n    obj = Array.from(\n      this.base.parentNode.querySelectorAll<HTMLElement>('thead th'),\n    ).reduce((prev, current) => {\n      prev[current.getAttribute('data-column-id')]['width'] =\n        current.clientWidth;\n\n      return prev;\n    }, obj);\n\n    return obj;\n  }\n\n  render() {\n    if (this.props.tableRef.current) {\n      return (\n        <div\n          ref={(nodeElement) => {\n            nodeElement && nodeElement.appendChild(this.tableElement);\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n", "export function camelCase(str: string): string {\n  if (!str) return '';\n\n  const words = str.split(' ');\n\n  // do not convert strings that are already in camelCase format\n  if (words.length === 1 && /([a-z][A-Z])+/g.test(str)) {\n    return str;\n  }\n\n  return words\n    .map(function (word, index) {\n      // if it is the first word, lowercase all the chars\n      if (index == 0) {\n        return word.toLowerCase();\n      }\n\n      // if it is not the first word only upper case the first char and lowercase the rest\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join('');\n}\n", "import { OneDArray, TColumn, TwoDArray } from './types';\nimport Base from './base';\nimport { Config, UserConfig } from './config';\nimport { px, width } from './util/width';\nimport { ShadowTable } from './view/table/shadow';\nimport {\n  Component,\n  ComponentChild,\n  createRef,\n  h,\n  isValidElement,\n  RefObject,\n  render,\n} from 'preact';\nimport { camelCase } from './util/string';\nimport { flatten } from './util/array';\nimport logger from './util/log';\nimport { PluginPosition } from './plugin';\n\nclass Header extends Base {\n  private _columns: OneDArray<TColumn>;\n\n  constructor() {\n    super();\n\n    this._columns = [];\n  }\n\n  get columns(): OneDArray<TColumn> {\n    return this._columns;\n  }\n\n  set columns(columns) {\n    this._columns = columns;\n  }\n\n  get visibleColumns(): OneDArray<TColumn> {\n    return this._columns.filter((c) => !c.hidden);\n  }\n\n  /**\n   * Tries to automatically adjust the width of columns based on:\n   *    - Header cell content\n   *    - Cell content of the first row\n   *    - Cell content of the last row\n   *\n   * @param config\n   */\n  adjustWidth(config: Config): this {\n    const container: Element = config.container;\n    const tableRef: RefObject<Component> = config.tableRef;\n    const tempRef: RefObject<HTMLDivElement> = config.tempRef;\n    const autoWidth = config.tempRef || true;\n\n    if (!container) {\n      // we can't calculate the width because the container\n      // is unknown at this stage\n      return this;\n    }\n\n    // pixels\n    const containerWidth = container.clientWidth;\n\n    // let's create a shadow table with the first 10 rows of the data\n    // and let the browser to render the table with table-layout: auto\n    // no padding, margin or border to get the minimum space required\n    // to render columns. One the table is rendered and widths are known,\n    // we unmount the shadow table from the DOM and set the correct width\n    const shadowTable = createRef();\n    let widths = {};\n\n    if (tableRef.current && autoWidth) {\n      // render a ShadowTable with the first 10 rows\n      const el = h(ShadowTable, {\n        tableRef: tableRef,\n      });\n      el.ref = shadowTable;\n\n      render(el, tempRef.current);\n\n      widths = shadowTable.current.widths();\n    }\n\n    for (const column of flatten(Header.tabularFormat(this.columns))) {\n      // because we don't want to set the width of parent THs\n      if (column.columns && column.columns.length > 0) {\n        continue;\n      }\n\n      if (!column.width && autoWidth) {\n        // tries to find the corresponding cell\n        // from the ShadowTable and set the correct width\n\n        if (column.id in widths) {\n          // because a column can be hidden, too\n          column.width = px(widths[column.id]['width']);\n          column.minWidth = px(widths[column.id]['minWidth']);\n        }\n      } else {\n        // column width is already defined\n        // sets the column with based on the width of its container\n        column.width = px(width(column.width, containerWidth));\n      }\n    }\n\n    if (tableRef.current && autoWidth) {\n      // unmount the shadow table from temp\n      render(null, tempRef.current);\n    }\n\n    return this;\n  }\n\n  private setSort(userConfig: UserConfig, columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      // sorting can only be enabled for columns without any children\n      if (column.columns && column.columns.length > 0) {\n        column.sort = {\n          enabled: false,\n        };\n      }\n\n      // implicit userConfig.sort flag\n      if (column.sort === undefined && userConfig.sort) {\n        column.sort = {\n          enabled: true,\n        };\n      }\n\n      // false, null, etc.\n      if (!column.sort) {\n        column.sort = {\n          enabled: false,\n        };\n      } else if (typeof column.sort === 'object') {\n        column.sort = {\n          enabled: true,\n          ...column.sort,\n        };\n      }\n\n      if (column.columns) {\n        this.setSort(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setFixedHeader(\n    userConfig: UserConfig,\n    columns?: OneDArray<TColumn>,\n  ): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (column.fixedHeader === undefined) {\n        column.fixedHeader = userConfig.fixedHeader;\n      }\n\n      if (column.columns) {\n        this.setFixedHeader(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setResizable(\n    userConfig: UserConfig,\n    columns?: OneDArray<TColumn>,\n  ): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (column.resizable === undefined) {\n        column.resizable = userConfig.resizable;\n      }\n\n      if (column.columns) {\n        this.setResizable(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setID(columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (!column.id && typeof column.name === 'string') {\n        // let's guess the column ID if it's undefined\n        column.id = camelCase(column.name);\n      }\n\n      if (!column.id) {\n        logger.error(\n          `Could not find a valid ID for one of the columns. Make sure a valid \"id\" is set for all columns.`,\n        );\n      }\n\n      // nested columns\n      if (column.columns) {\n        this.setID(column.columns);\n      }\n    }\n  }\n\n  private populatePlugins(\n    userConfig: UserConfig,\n    columns: OneDArray<TColumn>,\n  ): void {\n    // populate the cell columns\n    for (const column of columns) {\n      if (column.plugin !== undefined) {\n        userConfig.plugin.add({\n          id: column.id,\n          props: {},\n          ...column.plugin,\n          position: PluginPosition.Cell,\n        });\n      }\n    }\n  }\n\n  static fromColumns(\n    columns: OneDArray<TColumn | string | ComponentChild>,\n  ): Header {\n    const header = new Header();\n\n    for (const column of columns) {\n      if (typeof column === 'string' || isValidElement(column)) {\n        header.columns.push({\n          name: column,\n        });\n      } else if (typeof column === 'object') {\n        const typedColumn = column as TColumn;\n\n        if (typedColumn.columns) {\n          typedColumn.columns = Header.fromColumns(typedColumn.columns).columns;\n        }\n\n        // because the data for that cell is null\n        // if we are trying to render a plugin\n        if (typeof typedColumn.plugin === 'object') {\n          if (typedColumn.data === undefined) {\n            typedColumn.data = null;\n          }\n        }\n\n        // TColumn type\n        header.columns.push(column as TColumn);\n      }\n    }\n\n    return header;\n  }\n\n  static fromUserConfig(userConfig: UserConfig): Header | null {\n    const header = new Header();\n\n    // TODO: this part needs some refactoring\n    if (userConfig.from) {\n      header.columns = Header.fromHTMLTable(userConfig.from).columns;\n    } else if (userConfig.columns) {\n      header.columns = Header.fromColumns(userConfig.columns).columns;\n    } else if (\n      userConfig.data &&\n      typeof userConfig.data[0] === 'object' &&\n      !(userConfig.data[0] instanceof Array)\n    ) {\n      // if data[0] is an object but not an Array\n      // used for when a JSON payload is provided\n      header.columns = Object.keys(userConfig.data[0]).map((name) => {\n        return { name: name };\n      });\n    }\n\n    if (header.columns.length) {\n      header.setID();\n      header.setSort(userConfig);\n      header.setFixedHeader(userConfig);\n      header.setResizable(userConfig);\n      header.populatePlugins(userConfig, header.columns);\n      return header;\n    }\n\n    return null;\n  }\n\n  static fromHTMLTable(element: HTMLElement): Header {\n    const header = new Header();\n    const thead = element.querySelector('thead');\n    const ths = thead.querySelectorAll('th');\n\n    for (const th of ths as any) {\n      header.columns.push({\n        name: th.innerHTML,\n        width: th.width,\n      });\n    }\n\n    return header;\n  }\n\n  /**\n   * Converts the tree-like format of Header to a tabular format\n   *\n   * Example:\n   *\n   *    H1\n   *      H1-H1\n   *      H1-H2\n   *    H2\n   *      H2-H1\n   *\n   *    becomes:\n   *      [\n   *        [H1, H2],\n   *        [H1-H1, H1-H2, H2-H1]\n   *      ]\n   *\n   * @param columns\n   */\n  static tabularFormat(columns: OneDArray<TColumn>): TwoDArray<TColumn> {\n    let result: TwoDArray<TColumn> = [];\n    const cols = columns || [];\n    let nextRow = [];\n\n    if (cols && cols.length) {\n      result.push(cols);\n\n      for (const col of cols) {\n        if (col.columns && col.columns.length) {\n          nextRow = nextRow.concat(col.columns);\n        }\n      }\n\n      if (nextRow.length) {\n        result = result.concat(this.tabularFormat(nextRow));\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an array of leaf columns (last columns in the tree)\n   *\n   * @param columns\n   */\n  static leafColumns(columns: OneDArray<TColumn>): OneDArray<TColumn> {\n    let result: OneDArray<TColumn> = [];\n    const cols = columns || [];\n\n    if (cols && cols.length) {\n      for (const col of cols) {\n        if (!col.columns || col.columns.length === 0) {\n          result.push(col);\n        }\n\n        if (col.columns) {\n          result = result.concat(this.leafColumns(col.columns));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the maximum depth of a column tree\n   * @param column\n   */\n  static maximumDepth(column: TColumn): number {\n    return this.tabularFormat([column]).length - 1;\n  }\n}\n\nexport default Header;\n", "const _prefix = 'ID_';\n\n/**\n * This class is mostly based on Flux's Dispatcher by Facebook\n * https://github.com/facebook/flux/blob/master/src/Dispatcher.js\n */\nexport default class Dispatcher<TPayload> {\n  _callbacks: { [key: string]: (payload: TPayload) => void };\n  _isDispatching: boolean;\n  _isHandled: { [key: string]: boolean };\n  _isPending: { [key: string]: boolean };\n  _lastID: number;\n  _pendingPayload: TPayload;\n\n  constructor() {\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n  register(callback: (payload: TPayload) => void): string {\n    const id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  }\n  /**\n   * Removes a callback based on its token.\n   */\n  unregister(id: string): void {\n    if (!this._callbacks[id]) {\n      throw Error(\n        `Dispatcher.unregister(...): ${id} does not map to a registered callback.`,\n      );\n    }\n\n    delete this._callbacks[id];\n  }\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n  waitFor(ids: Array<string>): void {\n    if (!this._isDispatching) {\n      throw Error(\n        'Dispatcher.waitFor(...): Must be invoked while dispatching.',\n      );\n    }\n\n    for (let ii = 0; ii < ids.length; ii++) {\n      const id = ids[ii];\n      if (this._isPending[id]) {\n        if (!this._isHandled[id]) {\n          throw Error(`Dispatcher.waitFor(...): Circular dependency detected while ' +\n            'waiting for ${id}.`);\n        }\n        continue;\n      }\n      if (!this._callbacks[id]) {\n        throw Error(\n          `Dispatcher.waitFor(...): ${id} does not map to a registered callback.`,\n        );\n      }\n\n      this._invokeCallback(id);\n    }\n  }\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n  dispatch(payload: TPayload): void {\n    if (this._isDispatching) {\n      throw Error(\n        'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.',\n      );\n    }\n\n    this._startDispatching(payload);\n    try {\n      for (const id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  }\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n  isDispatching(): boolean {\n    return this._isDispatching;\n  }\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n  private _invokeCallback(id: string): void {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  }\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n  private _startDispatching(payload: TPayload): void {\n    for (const id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  }\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n  private _stopDispatching(): void {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  }\n}\n", "/**\n * Base Storage class. All storage implementation must inherit this class\n */\nimport { TData } from '../types';\n\nabstract class Storage<I> {\n  /**\n   * Returns all rows based on ...args\n   * @param args\n   */\n  abstract get(...args): Promise<StorageResponse>;\n\n  /**\n   * To set all rows\n   *\n   * @param data\n   */\n  set?(data: I | ((...args) => void)): this;\n}\n\nexport interface StorageResponse {\n  data: TData;\n  total: number;\n}\n\nexport default Storage;\n", "import Storage, { StorageResponse } from './storage';\nimport { TData } from '../types';\n\nclass MemoryStorage extends Storage<TData> {\n  private data: (() => TData) | (() => Promise<TData>);\n\n  constructor(data: TData | (() => TData) | (() => Promise<TData>)) {\n    super();\n    this.set(data);\n  }\n\n  public async get(): Promise<StorageResponse> {\n    const data = await this.data();\n\n    return {\n      data: data,\n      total: data.length,\n    };\n  }\n\n  public set(data: TData | (() => TData) | (() => Promise<TData>)): this {\n    if (data instanceof Array) {\n      this.data = (): TData => data;\n    } else if (data instanceof Function) {\n      this.data = data;\n    }\n\n    return this;\n  }\n}\n\nexport default MemoryStorage;\n", "import Storage, { StorageResponse } from './storage';\nimport log from '../util/log';\n\nexport interface ServerStorageOptions extends RequestInit {\n  url: string;\n  // to format the data and columns\n  then?: (data: any) => any[][];\n  // to handle the response from the server. `handle` will\n  // be called first and then `then` callback will be invoked\n  // The purpose of this function is to handle the behaviour\n  // of server and either reject and resolve the initial response\n  // before calling the `then` function\n  handle?: (response: Response) => Promise<any>;\n  total?: (data: any) => number;\n  // to bypass the current implementation of ServerStorage and process the\n  // request manually (e.g. when user wants to connect their own SDK/HTTP Client)\n  data?: (opts: ServerStorageOptions) => Promise<StorageResponse>;\n}\n\nclass ServerStorage extends Storage<ServerStorageOptions> {\n  private readonly options: ServerStorageOptions;\n\n  constructor(options: ServerStorageOptions) {\n    super();\n    this.options = options;\n  }\n\n  private handler(response: Response): Promise<any> {\n    if (typeof this.options.handle === 'function') {\n      return this.options.handle(response);\n    }\n\n    if (response.ok) {\n      return response.json();\n    } else {\n      log.error(\n        `Could not fetch data: ${response.status} - ${response.statusText}`,\n        true,\n      );\n      return null;\n    }\n  }\n\n  public get(options?: ServerStorageOptions): Promise<StorageResponse> {\n    // this.options is the initial config object\n    // options is the runtime config passed by the pipeline (e.g. search component)\n    const opts = {\n      ...this.options,\n      ...options,\n    };\n\n    // if `options.data` is provided, the current ServerStorage\n    // implementation will be ignored and we let options.data to\n    // handle the request. Useful when HTTP client needs to be\n    // replaced with something else\n    if (typeof opts.data === 'function') {\n      return opts.data(opts);\n    }\n\n    return fetch(opts.url, opts)\n      .then(this.handler.bind(this))\n      .then((res) => {\n        return {\n          data: opts.then(res),\n          total: typeof opts.total === 'function' ? opts.total(res) : undefined,\n        };\n      });\n  }\n}\n\nexport default ServerStorage;\n", "import { UserConfig } from '../config';\nimport MemoryStorage from './memory';\nimport Storage from './storage';\nimport ServerStorage from './server';\nimport log from '../util/log';\nimport { decode, html } from '../util/html';\n\nclass StorageUtils {\n  /**\n   * Accepts the userConfig dict and tries to guess and return a Storage type\n   *\n   * @param userConfig\n   */\n  public static createFromUserConfig(userConfig: UserConfig): Storage<any> {\n    let storage = null;\n    // `data` array is provided\n    if (userConfig.data) {\n      storage = new MemoryStorage(userConfig.data);\n    }\n\n    if (userConfig.from) {\n      storage = new MemoryStorage(this.tableElementToArray(userConfig.from));\n      // remove the source table element from the DOM\n      userConfig.from.style.display = 'none';\n    }\n\n    if (userConfig.server) {\n      storage = new ServerStorage(userConfig.server);\n    }\n\n    if (!storage) {\n      log.error('Could not determine the storage type', true);\n    }\n\n    return storage;\n  }\n\n  /**\n   * Accepts a HTML table element and converts it into a 2D array of data\n   *\n   * TODO: This function can be a step in the pipeline: Convert Table -> Load into a memory storage -> ...\n   *\n   * @param element\n   */\n  static tableElementToArray(element: HTMLElement): any[][] {\n    const arr = [];\n    const tbody = element.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    for (const row of rows as any) {\n      const cells: HTMLElement[] = row.querySelectorAll('td');\n      const parsedRow = [];\n\n      for (const cell of cells) {\n        // try to capture a TD with single text element first\n        if (\n          cell.childNodes.length === 1 &&\n          cell.childNodes[0].nodeType === Node.TEXT_NODE\n        ) {\n          parsedRow.push(decode(cell.innerHTML));\n        } else {\n          parsedRow.push(html(cell.innerHTML));\n        }\n      }\n\n      arr.push(parsedRow);\n    }\n\n    return arr;\n  }\n}\n\nexport default StorageUtils;\n", "import { PipelineProcessor, ProcessorType } from './processor';\nimport { ID } from '../util/id';\nimport log from '../util/log';\nimport { EventEmitter } from '../util/eventEmitter';\n\ninterface PipelineEvents<T> {\n  /**\n   * Generic updated event. Triggers the callback function when the pipeline\n   * is updated, including when a new processor is registered, a processor's props\n   * get updated, etc.\n   */\n  updated: (processor: PipelineProcessor<any, any>) => void;\n  /**\n   * Triggers the callback function when a new\n   * processor is registered successfully\n   */\n  afterRegister: () => void;\n  /**\n   * Triggers the callback when a registered\n   * processor's property is updated\n   */\n  propsUpdated: () => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * is fully processed, before returning the results\n   *\n   * afterProcess will not be called if there is an\n   * error in the pipeline (i.e a step throw an Error)\n   */\n  afterProcess: (prev: T) => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * fails to process all steps or at least one step\n   * throws an Error\n   */\n  error: (prev: T) => void;\n}\n\nclass Pipeline<T, P = unknown> extends EventEmitter<PipelineEvents<T>> {\n  // available steps for this pipeline\n  private readonly _steps: Map<ProcessorType, PipelineProcessor<T, P>[]> =\n    new Map<ProcessorType, PipelineProcessor<T, P>[]>();\n  // used to cache the results of processors using their id field\n  private cache: Map<string, any> = new Map<string, any>();\n  // keeps the index of the last updated processor in the registered\n  // processors list and will be used to invalidate the cache\n  // -1 means all new processors should be processed\n  private lastProcessorIndexUpdated = -1;\n\n  constructor(steps?: PipelineProcessor<any, any>[]) {\n    super();\n\n    if (steps) {\n      steps.forEach((step) => this.register(step));\n    }\n  }\n\n  /**\n   * Clears the `cache` array\n   */\n  clearCache(): void {\n    this.cache = new Map<string, any>();\n    this.lastProcessorIndexUpdated = -1;\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  register(\n    processor: PipelineProcessor<any, any>,\n    priority: number = null,\n  ): void {\n    if (processor.type === null) {\n      throw Error('Processor type is not defined');\n    }\n\n    // binding the propsUpdated callback to the Pipeline\n    processor.on('propsUpdated', this.processorPropsUpdated.bind(this));\n\n    this.addProcessorByPriority(processor, priority);\n    this.afterRegistered(processor);\n  }\n\n  /**\n   * Removes a processor from the list\n   *\n   * @param processor\n   */\n  unregister(processor: PipelineProcessor<any, any>): void {\n    if (!processor) return;\n\n    const subSteps = this._steps.get(processor.type);\n\n    if (subSteps && subSteps.length) {\n      this._steps.set(\n        processor.type,\n        subSteps.filter((proc) => proc != processor),\n      );\n      this.emit('updated', processor);\n    }\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  private addProcessorByPriority(\n    processor: PipelineProcessor<T, P>,\n    priority: number,\n  ): void {\n    let subSteps = this._steps.get(processor.type);\n\n    if (!subSteps) {\n      const newSubStep = [];\n      this._steps.set(processor.type, newSubStep);\n      subSteps = newSubStep;\n    }\n\n    if (priority === null || priority < 0) {\n      subSteps.push(processor);\n    } else {\n      if (!subSteps[priority]) {\n        // slot is empty\n        subSteps[priority] = processor;\n      } else {\n        // slot is NOT empty\n        const first = subSteps.slice(0, priority - 1);\n        const second = subSteps.slice(priority + 1);\n\n        this._steps.set(processor.type, first.concat(processor).concat(second));\n      }\n    }\n  }\n\n  /**\n   * Flattens the _steps Map and returns a list of steps with their correct priorities\n   */\n  get steps(): PipelineProcessor<T, P>[] {\n    let steps: PipelineProcessor<T, P>[] = [];\n\n    for (const type of this.getSortedProcessorTypes()) {\n      const subSteps = this._steps.get(type);\n\n      if (subSteps && subSteps.length) {\n        steps = steps.concat(subSteps);\n      }\n    }\n\n    // to remove any undefined elements\n    return steps.filter((s) => s);\n  }\n\n  /**\n   * Accepts ProcessType and returns an array of the registered processes\n   * with the give type\n   *\n   * @param type\n   */\n  getStepsByType(type: ProcessorType): PipelineProcessor<T, P>[] {\n    return this.steps.filter((process) => process.type === type);\n  }\n\n  /**\n   * Returns a list of ProcessorType according to their priority\n   */\n  private getSortedProcessorTypes(): ProcessorType[] {\n    return Object.keys(ProcessorType)\n      .filter((key) => !isNaN(Number(key)))\n      .map((key) => Number(key));\n  }\n\n  /**\n   * Runs all registered processors based on their correct priority\n   * and returns the final output after running all steps\n   *\n   * @param data\n   */\n  async process(data?: T): Promise<T> {\n    const lastProcessorIndexUpdated = this.lastProcessorIndexUpdated;\n    const steps = this.steps;\n\n    let prev = data;\n\n    try {\n      for (const processor of steps) {\n        const processorIndex = this.findProcessorIndexByID(processor.id);\n\n        if (processorIndex >= lastProcessorIndexUpdated) {\n          // we should execute process() here since the last\n          // updated processor was before \"processor\".\n          // This is to ensure that we always have correct and up to date\n          // data from processors and also to skip them when necessary\n          prev = await processor.process(prev);\n          this.cache.set(processor.id, prev);\n        } else {\n          // cached results already exist\n          prev = this.cache.get(processor.id);\n        }\n      }\n    } catch (e) {\n      log.error(e);\n      // trigger the onError callback\n      this.emit('error', prev);\n\n      // rethrow\n      throw e;\n    }\n\n    // means the pipeline is up to date\n    this.lastProcessorIndexUpdated = steps.length;\n\n    // triggers the afterProcess callbacks with the results\n    this.emit('afterProcess', prev);\n\n    return prev;\n  }\n\n  /**\n   * Returns the registered processor's index in _steps array\n   *\n   * @param processorID\n   */\n  private findProcessorIndexByID(processorID: ID): number {\n    return this.steps.findIndex((p) => p.id == processorID);\n  }\n\n  /**\n   * Sets the last updates processors index locally\n   * This is used to invalid or skip a processor in\n   * the process() method\n   */\n  private setLastProcessorIndex(processor: PipelineProcessor<T, P>): void {\n    const processorIndex = this.findProcessorIndexByID(processor.id);\n\n    if (this.lastProcessorIndexUpdated > processorIndex) {\n      this.lastProcessorIndexUpdated = processorIndex;\n    }\n  }\n\n  private processorPropsUpdated(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('propsUpdated');\n    this.emit('updated', processor);\n  }\n\n  private afterRegistered(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('afterRegister');\n    this.emit('updated', processor);\n  }\n}\n\nexport default Pipeline;\n", "import { ComponentChild } from 'preact';\nimport Row from './row';\nimport { SortConfig } from './view/plugin/sort/sort';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Plugin } from './plugin';\n\nexport type ProtoExtends<T, U> = U & Omit<T, keyof U>;\n\nexport type OneDArray<T> = T[];\nexport type TwoDArray<T> = T[][];\n\n/**\n * Table cell types\n */\nexport type TCell = number | string | boolean | ComponentChild | HTMLElement;\n// Array of Arrays\nexport type TDataArrayRow = OneDArray<TCell>;\nexport type TDataArray = OneDArray<TDataArrayRow>;\n// Array of Objects\nexport type TDataObjectRow = { [key: string]: TCell };\nexport type TDataObject = OneDArray<TDataObjectRow>;\n// (Array of Arrays) and (Array of Objects)\nexport type TData = TDataArray | TDataObject;\n\n// Table header cell type\nexport interface TColumn {\n  id?: string;\n  // default data for all columns\n  data?: ((row: TDataArrayRow | TDataObjectRow) => TCell) | TCell;\n  // column label\n  name?: string | ComponentChild;\n  plugin?: Plugin<any>;\n  // column width\n  width?: string;\n  minWidth?: string;\n  sort?: SortConfig;\n  columns?: OneDArray<TColumn>;\n  fixedHeader?: boolean;\n  resizable?: boolean;\n  hidden?: boolean;\n  formatter?: (cell: TCell, row: Row, column: TColumn) => ComponentChild;\n  // HTML attributes to be added to all cells and header of this column\n  attributes?:\n    | ((\n        // this is null when `attributes` is called for a th\n        cell: TCell | null,\n        row: Row | null,\n        column: TColumn,\n      ) => JSXInternal.HTMLAttributes<HTMLTableCellElement>)\n    | JSXInternal.HTMLAttributes<HTMLTableCellElement>;\n}\n\n// Comparator function for the sorting plugin\nexport type Comparator<T> = (a: T, b: T) => number;\n\nexport interface TColumnSort {\n  index: number;\n  // 1 ascending, -1 descending\n  direction?: 1 | -1;\n}\n\n// container status\nexport enum Status {\n  Init,\n  Loading,\n  Loaded,\n  Rendered,\n  Error,\n}\n\nexport type CSSDeclaration = {\n  [key: string]: string | number;\n};\n", "import Storage, { StorageResponse } from '../../storage/storage';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface StorageExtractorProps extends PipelineProcessorProps {\n  storage: Storage<any>;\n}\n\nclass StorageExtractor extends PipelineProcessor<\n  Promise<StorageResponse>,\n  StorageExtractorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Extractor;\n  }\n\n  async _process(opts: any): Promise<StorageResponse> {\n    return await this.props.storage.get(opts);\n  }\n}\n\nexport default StorageExtractor;\n", "import { PipelineProcessor, ProcessorType } from '../processor';\nimport Tabular from '../../tabular';\nimport { ArrayResponse } from './storageResponseToArray';\n\nclass ArrayToTabularTransformer extends PipelineProcessor<\n  Tabular,\n  Record<string, any>\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  _process(arrayResponse: ArrayResponse): Tabular {\n    const tabular = Tabular.fromArray(arrayResponse.data);\n\n    // for server-side storage\n    tabular.length = arrayResponse.total;\n\n    return tabular;\n  }\n}\n\nexport default ArrayToTabularTransformer;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerInitiatorProps extends PipelineProcessorProps {\n  serverStorageOptions: ServerStorageOptions;\n}\n\nclass ServerInitiator extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerInitiatorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Initiator;\n  }\n\n  _process(): ServerStorageOptions {\n    return Object.entries(this.props.serverStorageOptions)\n      .filter(([_, val]) => typeof val !== 'function')\n      .reduce(\n        (acc, [k, v]) => ({ ...acc, [k]: v }),\n        {},\n      ) as ServerStorageOptions;\n  }\n}\n\nexport default ServerInitiator;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { StorageResponse } from '../../storage/storage';\nimport { TCell, TData, TDataArray, TDataObject, TwoDArray } from '../../types';\nimport Header from '../../header';\nimport logger from '../../util/log';\n\nexport interface ArrayResponse {\n  data: TwoDArray<TCell>;\n  total: number;\n}\n\ninterface StorageResponseToArrayTransformerProps\n  extends PipelineProcessorProps {\n  header: Header;\n}\n\nclass StorageResponseToArrayTransformer extends PipelineProcessor<\n  ArrayResponse,\n  StorageResponseToArrayTransformerProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  private castData(data: TData): TwoDArray<TCell> {\n    if (!data || !data.length) {\n      return [];\n    }\n\n    if (!this.props.header || !this.props.header.columns) {\n      return data as TwoDArray<TCell>;\n    }\n\n    const columns = Header.leafColumns(this.props.header.columns);\n\n    // if it's a 2d array already\n    if (data[0] instanceof Array) {\n      return (data as TDataArray).map((row) => {\n        let pad = 0;\n\n        return columns.map((column, i) => {\n          // default `data` is provided for this column\n          if (column.data !== undefined) {\n            pad++;\n\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          }\n\n          return row[i - pad];\n        });\n      });\n    }\n\n    // if it's an array of objects (but not array of arrays, i.e JSON payload)\n    if (typeof data[0] === 'object' && !(data[0] instanceof Array)) {\n      return (data as TDataObject).map((row) =>\n        columns.map((column, i) => {\n          if (column.data !== undefined) {\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          } else if (column.id) {\n            return row[column.id];\n          } else {\n            logger.error(`Could not find the correct cell for column at position ${i}.\n                          Make sure either 'id' or 'selector' is defined for all columns.`);\n            return null;\n          }\n        }),\n      );\n    }\n\n    return [];\n  }\n\n  _process(storageResponse: StorageResponse): ArrayResponse {\n    return {\n      data: this.castData(storageResponse.data),\n      total: storageResponse.total,\n    };\n  }\n}\n\nexport default StorageResponseToArrayTransformer;\n", "import { Config } from '../config';\nimport Pipeline from './pipeline';\nimport Tabular from '../tabular';\nimport StorageExtractor from './extractor/storage';\nimport ArrayToTabularTransformer from './transformer/arrayToTabular';\nimport ServerStorage from '../storage/server';\nimport ServerInitiator from './initiator/server';\nimport StorageResponseToArrayTransformer from './transformer/storageResponseToArray';\n\nclass PipelineUtils {\n  static createFromConfig(config: Config): Pipeline<Tabular> {\n    const pipeline = new Pipeline<Tabular>();\n\n    if (config.storage instanceof ServerStorage) {\n      pipeline.register(\n        new ServerInitiator({\n          serverStorageOptions: config.server,\n        }),\n      );\n    }\n\n    pipeline.register(new StorageExtractor({ storage: config.storage }));\n    pipeline.register(\n      new StorageResponseToArrayTransformer({ header: config.header }),\n    );\n    pipeline.register(new ArrayToTabularTransformer());\n\n    return pipeline;\n  }\n}\n\nexport default PipelineUtils;\n", "import {\n  CSSDeclaration,\n  OneDArray,\n  ProtoExtends,\n  TColumn,\n  TData,\n} from './types';\nimport Storage from './storage/storage';\nimport Pipeline from './pipeline/pipeline';\nimport Tabular from './tabular';\nimport { Search, SearchConfig } from './view/plugin/search/search';\nimport { Pagination, PaginationConfig } from './view/plugin/pagination';\nimport Header from './header';\nimport { ServerStorageOptions } from './storage/server';\nimport Dispatcher from './util/dispatcher';\nimport { GenericSortConfig } from './view/plugin/sort/sort';\nimport { Language, Translator } from './i18n/language';\nimport { Component, ComponentChild, createRef, RefObject } from 'preact';\nimport StorageUtils from './storage/storageUtils';\nimport PipelineUtils from './pipeline/pipelineUtils';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager, PluginPosition, Plugin } from './plugin';\nimport Grid from './grid';\n\n// Config type used internally\nexport interface Config {\n  // a reference to the current Grid.js instance\n  instance: Grid;\n  eventEmitter: EventEmitter<GridEvents>;\n  dispatcher: Dispatcher<any>;\n  plugin: PluginManager;\n  /** container element that is used to mount the Grid.js to */\n  // TODO: change this to an element reference\n  container?: Element;\n  /** pointer to the main table element */\n  tableRef?: RefObject<Component>;\n  /** gridjs-temp div which is used internally */\n  tempRef?: RefObject<HTMLDivElement>;\n  data?: TData | (() => TData) | (() => Promise<TData>);\n  server?: ServerStorageOptions;\n  header?: Header;\n  /** to parse a HTML table and load the data */\n  from: HTMLElement;\n  storage: Storage<any>;\n  pipeline: Pipeline<Tabular>;\n  /** to automatically calculate the columns width */\n  autoWidth: boolean;\n  /** sets the width of the container and table */\n  width: string;\n  /** sets the height of the table */\n  height: string;\n  pagination: PaginationConfig;\n  sort: GenericSortConfig;\n  translator: Translator;\n  style?: Partial<{\n    table: CSSDeclaration;\n    td: CSSDeclaration;\n    th: CSSDeclaration;\n    container: CSSDeclaration;\n    header: CSSDeclaration;\n    footer: CSSDeclaration;\n  }>;\n  className?: Partial<{\n    table: string;\n    th: string;\n    thead: string;\n    tbody: string;\n    tr: string;\n    td: string;\n    container: string;\n    footer: string;\n    header: string;\n    search: string;\n    sort: string;\n    pagination: string;\n    paginationSummary: string;\n    paginationButton: string;\n    paginationButtonNext: string;\n    paginationButtonCurrent: string;\n    paginationButtonPrev: string;\n    loading: string;\n    notfound: string;\n    error: string;\n  }>;\n}\n\n// Config type used by the consumers\ninterface UserConfigExtend {\n  /** fixes the table header to the top of the table */\n  fixedHeader: boolean;\n  /** Resizable columns? */\n  resizable: boolean;\n  columns: OneDArray<TColumn | string | ComponentChild>;\n  search: SearchConfig | boolean;\n  pagination: PaginationConfig | boolean;\n  // implicit option to enable the sort plugin globally\n  sort: GenericSortConfig | boolean;\n  language: Language;\n  plugins?: Plugin<any>[];\n}\n\nexport type UserConfig = ProtoExtends<\n  Partial<Config>,\n  Partial<UserConfigExtend>\n>;\n\nexport class Config {\n  // this is the config file passed by the user\n  // we need this for Config.update()\n  private _userConfig: UserConfig;\n\n  constructor(config?: Partial<Config>) {\n    Object.assign(this, {\n      ...Config.defaultConfig(),\n      ...config,\n    });\n\n    this._userConfig = {};\n  }\n\n  /**\n   * Assigns `updatedConfig` keys to the current config file\n   *\n   * @param updatedConfig\n   */\n  assign(updatedConfig: Partial<Config>): Config {\n    for (const key of Object.keys(updatedConfig)) {\n      // because we don't want to update the _userConfig cache\n      if (key === '_userConfig') continue;\n\n      this[key] = updatedConfig[key];\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the config from a UserConfig\n   *\n   * @param userConfig\n   */\n  update(userConfig: Partial<UserConfig>): Config {\n    if (!userConfig) return this;\n\n    this._userConfig = {\n      ...this._userConfig,\n      ...userConfig,\n    };\n\n    this.assign(Config.fromUserConfig(this._userConfig));\n\n    return this;\n  }\n\n  static defaultConfig(): Config {\n    return {\n      plugin: new PluginManager(),\n      dispatcher: new Dispatcher<any>(),\n      tableRef: createRef(),\n      tempRef: createRef(),\n      width: '100%',\n      height: 'auto',\n      autoWidth: true,\n      style: {},\n      className: {},\n    } as Config;\n  }\n\n  static fromUserConfig(userConfig: UserConfig): Config {\n    const config = new Config(userConfig as Config);\n\n    // to set the initial _userConfig object\n    config._userConfig = userConfig;\n\n    // Sort\n    if (typeof userConfig.sort === 'boolean' && userConfig.sort) {\n      config.assign({\n        sort: {\n          multiColumn: true,\n        },\n      });\n    }\n\n    // Header\n    config.assign({\n      header: Header.fromUserConfig(config),\n    });\n\n    config.assign({\n      storage: StorageUtils.createFromUserConfig(userConfig),\n    });\n\n    config.assign({\n      pipeline: PipelineUtils.createFromConfig(config),\n    });\n\n    // Translator\n    config.assign({\n      translator: new Translator(userConfig.language),\n    });\n\n    // Search\n    config.plugin.add({\n      id: 'search',\n      position: PluginPosition.Header,\n      component: Search,\n      props: {\n        enabled:\n          userConfig.search === true || userConfig.search instanceof Object,\n        ...(userConfig.search as SearchConfig),\n      },\n    });\n\n    // Pagination\n    config.plugin.add({\n      id: 'pagination',\n      position: PluginPosition.Footer,\n      component: Pagination,\n      props: {\n        enabled:\n          userConfig.pagination === true ||\n          userConfig.pagination instanceof Object,\n        ...(userConfig.pagination as PaginationConfig),\n      },\n    });\n\n    // Additional plugins\n    if (userConfig.plugins) {\n      userConfig.plugins.forEach((p) => config.plugin.add(p));\n    }\n\n    return config;\n  }\n}\n", "import{options as n}from\"preact\";var t,r,u,i,o=0,c=[],f=[],e=n.__b,a=n.__r,v=n.diffed,l=n.__c,m=n.unmount;function d(t,u){n.__h&&n.__h(r,t,o||u),o=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:f}),i.__[t]}function p(n){return o=1,y(z,n)}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):z(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.u)){r.u=!0;var c=r.shouldComponentUpdate;r.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return!n.__N}))return!c||c.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),!!i&&(!c||c.call(this,n,t,r))}}return o.__N||o.__}function h(u,i){var o=d(t++,3);!n.__s&&w(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o))}function s(u,i){var o=d(t++,4);!n.__s&&w(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o))}function _(n){return o=5,F(function(){return{current:n}},[])}function A(n,t,r){o=6,s(function(){return\"function\"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n))}function F(n,r){var u=d(t++,7);return w(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T(n,t){return o=8,F(function(){return n},t)}function q(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x(t,r){n.useDebugValue&&n.useDebugValue(r?r(t):t)}function V(n){var u=d(t++,10),i=p();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n){u.__&&u.__(n),i[1](n)}),[i[0],function(){i[1](void 0)}]}function b(){for(var t;t=c.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(j),t.__H.__h.forEach(k),t.__H.__h=[]}catch(r){t.__H.__h=[],n.__e(r,t.__v)}}n.__b=function(n){r=null,e&&e(n)},n.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=f,n.__N=n.i=void 0})):(i.__h.forEach(j),i.__h.forEach(k),i.__h=[])),u=r},n.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==c.push(o)&&i===n.requestAnimationFrame||((i=n.requestAnimationFrame)||function(n){var t,r=function(){clearTimeout(u),g&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);g&&(t=requestAnimationFrame(r))})(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==f&&(n.__=n.__V),n.i=void 0,n.__V=f})),u=r=null},n.__c=function(t,r){r.some(function(t){try{t.__h.forEach(j),t.__h=t.__h.filter(function(n){return!n.__||k(n)})}catch(u){r.some(function(n){n.__h&&(n.__h=[])}),r=[],n.__e(u,t.__v)}}),l&&l(t,r)},n.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{j(n)}catch(n){r=n}}),r&&n.__e(r,u.__v))};var g=\"function\"==typeof requestAnimationFrame;function j(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function k(n){var t=r;n.__c=n.__(),r=t}function w(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function z(n,t){return\"function\"==typeof t?t(n):t}export{p as useState,y as useReducer,h as useEffect,s as useLayoutEffect,_ as useRef,A as useImperativeHandle,F as useMemo,T as useCallback,q as useContext,x as useDebugValue,V as useErrorBoundary};\n//# sourceMappingURL=hooks.module.js.map\n", "import { ComponentChild, h, JSX } from 'preact';\n\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport Row from '../../row';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { PluginRenderer } from '../../plugin';\n\nexport interface TDProps\n  extends BaseProps,\n    JSX.HTMLAttributes<HTMLTableCellElement> {\n  cell: Cell;\n  row?: Row;\n  column?: TColumn;\n  style?: CSSDeclaration;\n  messageCell?: boolean;\n}\n\nexport class TD extends BaseComponent<TDProps> {\n  private content(): ComponentChild {\n    if (\n      this.props.column &&\n      typeof this.props.column.formatter === 'function'\n    ) {\n      return this.props.column.formatter(\n        this.props.cell.data,\n        this.props.row,\n        this.props.column,\n      );\n    }\n\n    if (this.props.column && this.props.column.plugin) {\n      return (\n        <PluginRenderer\n          pluginId={this.props.column.id}\n          props={{\n            column: this.props.column,\n            cell: this.props.cell,\n            row: this.props.row,\n          }}\n        />\n      );\n    }\n\n    return this.props.cell.data;\n  }\n\n  private handleClick(e: JSX.TargetedMouseEvent<HTMLTableCellElement>): void {\n    if (this.props.messageCell) return;\n    this.config.eventEmitter.emit(\n      'cellClick',\n      e,\n      this.props.cell,\n      this.props.column,\n      this.props.row,\n    );\n  }\n\n  private getCustomAttributes(\n    column: TColumn | null,\n  ): JSXInternal.HTMLAttributes<HTMLTableCellElement> {\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(\n        this.props.cell.data,\n        this.props.row,\n        this.props.column,\n      );\n    } else {\n      return column.attributes;\n    }\n  }\n\n  render() {\n    return (\n      <td\n        role={this.props.role}\n        colSpan={this.props.colSpan}\n        data-column-id={this.props.column && this.props.column.id}\n        className={classJoin(\n          className('td'),\n          this.props.className,\n          this.config.className.td,\n        )}\n        style={{\n          ...this.props.style,\n          ...this.config.style.td,\n        }}\n        onClick={this.handleClick.bind(this)}\n        {...this.getCustomAttributes(this.props.column)}\n      >\n        {this.content()}\n      </td>\n    );\n  }\n}\n", "import { h, JSX, Fragment, ComponentChildren } from 'preact';\n\nimport Row from '../../row';\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { TColumn } from '../../types';\nimport { TD } from './td';\nimport Header from '../../header';\n\nexport interface TRProps extends BaseProps {\n  row?: Row;\n  header?: Header;\n  messageRow?: boolean;\n}\n\nexport class TR extends BaseComponent<TRProps> {\n  private getColumn(cellIndex: number): TColumn {\n    if (this.props.header) {\n      const cols = Header.leafColumns(this.props.header.columns);\n\n      if (cols) {\n        return cols[cellIndex];\n      }\n    }\n\n    return null;\n  }\n\n  private handleClick(e: JSX.TargetedMouseEvent<HTMLTableRowElement>): void {\n    if (this.props.messageRow) return;\n    this.config.eventEmitter.emit('rowClick', e, this.props.row);\n  }\n\n  private getChildren(): ComponentChildren {\n    if (this.props.children) {\n      return this.props.children;\n    } else {\n      return (\n        <Fragment>\n          {this.props.row.cells.map((cell: Cell, i) => {\n            const column = this.getColumn(i);\n\n            if (column && column.hidden) return null;\n\n            return (\n              <TD\n                key={cell.id}\n                cell={cell}\n                row={this.props.row}\n                column={column}\n              />\n            );\n          })}\n        </Fragment>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <tr\n        className={classJoin(className('tr'), this.config.className.tr)}\n        onClick={this.handleClick.bind(this)}\n      >\n        {this.getChildren()}\n      </tr>\n    );\n  }\n}\n", "import { h } from 'preact';\n\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { TR } from './tr';\nimport { TD } from './td';\n\nexport interface MessageRowProps extends BaseProps {\n  message: string;\n  colSpan?: number;\n  className?: string;\n}\n\nexport class MessageRow extends BaseComponent<MessageRowProps> {\n  render() {\n    return (\n      <TR messageRow={true}>\n        <TD\n          role=\"alert\"\n          colSpan={this.props.colSpan}\n          messageCell={true}\n          cell={new Cell(this.props.message)}\n          className={classJoin(\n            className('message'),\n            this.props.className ? this.props.className : null,\n          )}\n        />\n      </TR>\n    );\n  }\n}\n", "import { h } from 'preact';\n\nimport Row from '../../row';\nimport { TR } from './tr';\nimport Tabular from '../../tabular';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { Status } from '../../types';\nimport Header from '../../header';\nimport { MessageRow } from './messageRow';\n\ninterface TBodyProps extends BaseProps {\n  data: Tabular;\n  status: Status;\n  header?: Header;\n}\n\nexport class TBody extends BaseComponent<TBodyProps> {\n  private headerLength(): number {\n    if (this.props.header) {\n      return this.props.header.visibleColumns.length;\n    }\n    return 0;\n  }\n\n  render() {\n    return (\n      <tbody\n        className={classJoin(className('tbody'), this.config.className.tbody)}\n      >\n        {this.props.data &&\n          this.props.data.rows.map((row: Row) => {\n            return <TR key={row.id} row={row} header={this.props.header} />;\n          })}\n\n        {this.props.status === Status.Loading &&\n          (!this.props.data || this.props.data.length === 0) && (\n            <MessageRow\n              message={this._('loading')}\n              colSpan={this.headerLength()}\n              className={classJoin(\n                className('loading'),\n                this.config.className.loading,\n              )}\n            />\n          )}\n\n        {this.props.status === Status.Rendered &&\n          this.props.data &&\n          this.props.data.length === 0 && (\n            <MessageRow\n              message={this._('noRecordsFound')}\n              colSpan={this.headerLength()}\n              className={classJoin(\n                className('notfound'),\n                this.config.className.notfound,\n              )}\n            />\n          )}\n\n        {this.props.status === Status.Error && (\n          <MessageRow\n            message={this._('error')}\n            colSpan={this.headerLength()}\n            className={classJoin(\n              className('error'),\n              this.config.className.error,\n            )}\n          />\n        )}\n      </tbody>\n    );\n  }\n}\n", "import { Comparator, TCell } from '../../types';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport Row from '../../row';\nimport log from '../../util/log';\n\ninterface NativeSortProps extends PipelineProcessorProps {\n  columns: {\n    index: number;\n    // 1 ascending, -1 descending\n    direction?: 1 | -1;\n    compare?: Comparator<TCell>;\n  }[];\n}\n\nclass NativeSort extends PipelineProcessor<Tabular, NativeSortProps> {\n  protected validateProps(): void {\n    for (const condition of this.props.columns) {\n      if (condition.direction === undefined) {\n        condition.direction = 1;\n      }\n\n      if (condition.direction !== 1 && condition.direction !== -1) {\n        log.error(`Invalid sort direction ${condition.direction}`);\n      }\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Sort;\n  }\n\n  private compare(cellA: TCell, cellB: TCell): number {\n    if (cellA > cellB) {\n      return 1;\n    } else if (cellA < cellB) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  private compareWrapper(a: Row, b: Row): number {\n    let cmp = 0;\n\n    for (const column of this.props.columns) {\n      if (cmp === 0) {\n        const cellA = a.cells[column.index].data;\n        const cellB = b.cells[column.index].data;\n\n        if (typeof column.compare === 'function') {\n          cmp |= column.compare(cellA, cellB) * column.direction;\n        } else {\n          cmp |= this.compare(cellA, cellB) * column.direction;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return cmp;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const sortedRows = [...data.rows];\n    sortedRows.sort(this.compareWrapper.bind(this));\n\n    const sorted = new Tabular(sortedRows);\n    // we have to set the tabular length manually\n    // because of the server-side storage\n    sorted.length = data.length;\n\n    return sorted;\n  }\n}\n\nexport default NativeSort;\n", "import BaseStore from '../../base/store';\nimport { SortActionsType } from './actions';\nimport { Comparator, TCell } from '../../../types';\n\nexport type SortStoreState = {\n  index: number;\n  direction: 1 | -1;\n  compare?: Comparator<TCell>;\n}[];\n\nexport class SortStore extends BaseStore<SortStoreState, SortActionsType> {\n  getInitialState(): SortStoreState {\n    return [];\n  }\n\n  handle(type, payload): void {\n    if (type === 'SORT_COLUMN') {\n      const { index, direction, multi, compare } = payload;\n      this.sortColumn(index, direction, multi, compare);\n    } else if (type === 'SORT_COLUMN_TOGGLE') {\n      const { index, multi, compare } = payload;\n      this.sortToggle(index, multi, compare);\n    }\n  }\n\n  private sortToggle(\n    index: number,\n    multi: boolean,\n    compare: Comparator<TCell>,\n  ): void {\n    const columns = [...this.state];\n    const column = columns.find((x) => x.index === index);\n\n    if (!column) {\n      this.sortColumn(index, 1, multi, compare);\n    } else {\n      this.sortColumn(index, column.direction === 1 ? -1 : 1, multi, compare);\n    }\n  }\n\n  private sortColumn(\n    index: number,\n    direction: 1 | -1,\n    multi: boolean,\n    compare: Comparator<TCell>,\n  ): void {\n    let columns = [...this.state];\n    const count = columns.length;\n    const column = columns.find((x) => x.index === index);\n    const exists = column !== undefined;\n\n    let add = false;\n    let reset = false;\n    let remove = false;\n    let update = false;\n\n    if (!exists) {\n      // the column has not been sorted\n      if (count === 0) {\n        // the first column to be sorted\n        add = true;\n      } else if (count > 0 && !multi) {\n        // remove the previously sorted column\n        // and sort the current column\n        add = true;\n        reset = true;\n      } else if (count > 0 && multi) {\n        // multi-sorting\n        // sort this column as well\n        add = true;\n      }\n    } else {\n      // the column has been sorted before\n      if (!multi) {\n        // single column sorting\n        if (count === 1) {\n          update = true;\n        } else if (count > 1) {\n          // this situation happens when we have already entered\n          // multi-sorting mode but then user tries to sort a single column\n          reset = true;\n          add = true;\n        }\n      } else {\n        // multi sorting\n        if (column.direction === -1) {\n          // remove the current column from the\n          // sorted columns array\n          remove = true;\n        } else {\n          update = true;\n        }\n      }\n    }\n\n    if (reset) {\n      // resetting the sorted columns\n      columns = [];\n    }\n\n    if (add) {\n      columns.push({\n        index: index,\n        direction: direction,\n        compare: compare,\n      });\n    } else if (update) {\n      const index = columns.indexOf(column);\n      columns[index].direction = direction;\n    } else if (remove) {\n      const index = columns.indexOf(column);\n      columns.splice(index, 1);\n    }\n\n    this.setState(columns);\n  }\n}\n", "import { BaseActions } from '../../base/actions';\nimport { Comparator, TCell } from '../../../types';\n\nexport interface SortActionsType {\n  SORT_COLUMN: {\n    index: number;\n    direction: 1 | -1;\n    multi?: boolean;\n    compare?: Comparator<TCell>;\n  };\n\n  SORT_COLUMN_TOGGLE: {\n    index: number;\n    multi?: boolean;\n    compare?: Comparator<TCell>;\n  };\n}\n\nexport class SortActions extends BaseActions<SortActionsType> {\n  sortColumn(\n    index: number,\n    direction: 1 | -1,\n    multi?: boolean,\n    compare?: Comparator<TCell>,\n  ): void {\n    this.dispatch('SORT_COLUMN', {\n      index: index,\n      direction: direction,\n      multi: multi,\n      compare: compare,\n    });\n  }\n\n  sortToggle(\n    index: number,\n    multi?: boolean,\n    compare?: Comparator<TCell>,\n  ): void {\n    this.dispatch('SORT_COLUMN_TOGGLE', {\n      index: index,\n      multi: multi,\n      compare: compare,\n    });\n  }\n}\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\nimport { TColumnSort } from '../../types';\n\ninterface ServerSortProps extends PipelineProcessorProps {\n  columns: TColumnSort[];\n  url?: (prevUrl: string, columns: TColumnSort[]) => string;\n  body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n}\n\nclass ServerSort extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerSortProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerSort;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.columns);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.columns);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerSort;\n", "import { h, JSX } from 'preact';\n\nimport { BaseComponent, BaseProps } from '../../base';\nimport { classJoin, className } from '../../../util/className';\nimport { ProcessorType } from '../../../pipeline/processor';\nimport NativeSort from '../../../pipeline/sort/native';\nimport { SortStore, SortStoreState } from './store';\nimport { Comparator, TCell, TColumnSort } from '../../../types';\nimport { SortActions } from './actions';\nimport ServerSort from '../../../pipeline/sort/server';\n\n// column specific config\nexport interface SortConfig {\n  enabled?: boolean;\n  compare?: Comparator<TCell>;\n}\n\n// generic sort config:\n//\n// Config {\n//    sort: GenericSortConfig\n// }\n//\nexport interface GenericSortConfig {\n  multiColumn?: boolean;\n  server?: {\n    url?: (prevUrl: string, columns: TColumnSort[]) => string;\n    body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n  };\n}\n\nexport interface SortProps extends BaseProps {\n  // column index\n  index: number;\n}\n\ninterface SortState {\n  direction: 1 | -1 | 0;\n}\n\nexport class Sort extends BaseComponent<SortProps & SortConfig, SortState> {\n  private readonly sortProcessor: NativeSort | ServerSort;\n  private readonly actions: SortActions;\n  private readonly store: SortStore;\n  private readonly updateStateFn: (...args) => void;\n  private updateSortProcessorFn: (sortedColumns: SortStoreState) => void;\n\n  constructor(props: SortProps & SortConfig, context) {\n    super(props, context);\n\n    this.actions = new SortActions(this.config.dispatcher);\n    this.store = new SortStore(this.config.dispatcher);\n\n    if (props.enabled) {\n      this.sortProcessor = this.getOrCreateSortProcessor();\n      this.updateStateFn = this.updateState.bind(this);\n      this.store.on('updated', this.updateStateFn);\n      this.state = { direction: 0 };\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.config.pipeline.unregister(this.sortProcessor);\n\n    this.store.off('updated', this.updateStateFn);\n    if (this.updateSortProcessorFn)\n      this.store.off('updated', this.updateSortProcessorFn);\n  }\n\n  /**\n   * Sets the internal state of component\n   */\n  private updateState(): void {\n    const currentColumn = this.store.state.find(\n      (x) => x.index === this.props.index,\n    );\n\n    if (!currentColumn) {\n      this.setState({\n        direction: 0,\n      });\n    } else {\n      this.setState({\n        direction: currentColumn.direction,\n      });\n    }\n  }\n\n  private updateSortProcessor(sortedColumns: SortStoreState) {\n    // updates the Sorting processor\n    this.sortProcessor.setProps({\n      columns: sortedColumns,\n    });\n  }\n\n  private getOrCreateSortProcessor(): NativeSort {\n    let processorType = ProcessorType.Sort;\n\n    if (this.config.sort && typeof this.config.sort.server === 'object') {\n      processorType = ProcessorType.ServerSort;\n    }\n\n    const processors = this.config.pipeline.getStepsByType(processorType);\n\n    // my assumption is that we only have ONE sorting processor in the\n    // entire pipeline and that's why I'm displaying a warning here\n    let processor;\n\n    // A sort process is already registered\n    if (processors.length > 0) {\n      processor = processors[0];\n    } else {\n      // let's create a new sort processor\n\n      // this event listener is here because\n      // we want to subscribe to the sort store only once\n      this.updateSortProcessorFn = this.updateSortProcessor.bind(this);\n      this.store.on('updated', this.updateSortProcessorFn);\n\n      if (processorType === ProcessorType.ServerSort) {\n        processor = new ServerSort({\n          columns: this.store.state,\n          ...this.config.sort.server,\n        });\n      } else {\n        processor = new NativeSort({\n          columns: this.store.state,\n        });\n      }\n\n      this.config.pipeline.register(processor);\n    }\n\n    return processor;\n  }\n\n  changeDirection(e: JSX.TargetedMouseEvent<HTMLButtonElement>): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // to sort two or more columns at the same time\n    this.actions.sortToggle(\n      this.props.index,\n      e.shiftKey === true && this.config.sort.multiColumn,\n      this.props.compare,\n    );\n  }\n\n  render() {\n    if (!this.props.enabled) {\n      return null;\n    }\n\n    const direction = this.state.direction;\n    let sortClassName = 'neutral';\n\n    if (direction === 1) {\n      sortClassName = 'asc';\n    } else if (direction === -1) {\n      sortClassName = 'desc';\n    }\n\n    return (\n      <button\n        // because the corresponding <th> has tabIndex=0\n        tabIndex={-1}\n        aria-label={this._(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n        title={this._(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n        className={classJoin(\n          className('sort'),\n          className('sort', sortClassName),\n          this.config.className.sort,\n        )}\n        onClick={this.changeDirection.bind(this)}\n      />\n    );\n  }\n}\n", "import { h, RefObject } from 'preact';\nimport { classJoin, className } from '../../../util/className';\nimport { BaseComponent } from '../../base';\nimport { TColumn } from '../../../types';\nimport { TH } from '../../table/th';\nimport { throttle } from '../../../util/throttle';\n\ntype ResizeProps = {\n  column: TColumn;\n  thRef: RefObject<TH>;\n};\n\ntype ResizeState = {\n  width: string;\n  offsetStart: number;\n};\n\nexport class Resize extends BaseComponent<ResizeProps, ResizeState> {\n  private moveFn: (e) => void;\n  private upFn: (e) => void;\n\n  private getPageX(e: MouseEvent | TouchEvent): number {\n    if (e instanceof MouseEvent) {\n      return Math.floor(e.pageX);\n    } else {\n      return Math.floor(e.changedTouches[0].pageX);\n    }\n  }\n\n  private start(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const thElement: HTMLElement = this.props.thRef.current;\n\n    this.setState({\n      offsetStart: parseInt(thElement.style.width, 10) - this.getPageX(e),\n    });\n\n    this.upFn = this.end.bind(this);\n    this.moveFn = throttle(this.move.bind(this), 10);\n\n    document.addEventListener('mouseup', this.upFn);\n    document.addEventListener('touchend', this.upFn);\n    document.addEventListener('mousemove', this.moveFn);\n    document.addEventListener('touchmove', this.moveFn);\n  }\n\n  private move(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const thElement: HTMLElement = this.props.thRef.current;\n\n    if (\n      this.state.offsetStart + this.getPageX(e) >=\n      parseInt(thElement.style.minWidth, 10)\n    ) {\n      thElement.style.width = `${this.state.offsetStart + this.getPageX(e)}px`;\n    }\n  }\n\n  private end(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    document.removeEventListener('mouseup', this.upFn);\n    document.removeEventListener('mousemove', this.moveFn);\n    document.removeEventListener('touchmove', this.moveFn);\n    document.removeEventListener('touchend', this.upFn);\n  }\n\n  render() {\n    return (\n      <div\n        className={classJoin(className('th'), className('resizable'))}\n        onMouseDown={this.start.bind(this)}\n        onTouchStart={this.start.bind(this)}\n        onClick={(e) => e.stopPropagation()}\n      />\n    );\n  }\n}\n", "export const throttle = (fn: (...args) => void, wait = 100) => {\n  let inThrottle: boolean;\n  let lastFn: ReturnType<typeof setTimeout>;\n  let lastTime: number;\n\n  return (...args) => {\n    if (!inThrottle) {\n      fn(...args);\n      lastTime = Date.now();\n      inThrottle = true;\n    } else {\n      clearTimeout(lastFn);\n      lastFn = setTimeout(() => {\n        if (Date.now() - lastTime >= wait) {\n          fn(...args);\n          lastTime = Date.now();\n        }\n      }, Math.max(wait - (Date.now() - lastTime), 0));\n    }\n  };\n};\n", "import { ComponentChild, createRef, h, JSX } from 'preact';\n\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport { Sort } from '../plugin/sort/sort';\nimport { PluginRenderer } from '../../plugin';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Resize } from '../plugin/resize/resize';\n\nexport interface THProps\n  extends BaseProps,\n    JSX.HTMLAttributes<HTMLTableCellElement> {\n  index: number;\n  column: TColumn;\n  style?: CSSDeclaration;\n}\n\nexport interface THState {\n  style: CSSDeclaration;\n}\n\nexport class TH extends BaseComponent<THProps, THState> {\n  private sortRef = createRef();\n  private thRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      style: {},\n    };\n  }\n\n  private isSortable(): boolean {\n    return this.props.column.sort.enabled;\n  }\n\n  private isResizable(): boolean {\n    return this.props.column.resizable;\n  }\n\n  private onClick(e: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n    e.stopPropagation();\n\n    if (this.isSortable()) {\n      this.sortRef.current.changeDirection(e);\n    }\n  }\n\n  private keyDown(e: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n    if (this.isSortable() && e.which === 13) {\n      this.onClick(e);\n    }\n  }\n\n  componentDidMount(): void {\n    setTimeout(() => {\n      // sets the `top` style if the current TH is fixed\n      if (this.props.column.fixedHeader && this.thRef.current) {\n        const offsetTop = this.thRef.current.offsetTop;\n\n        if (typeof offsetTop === 'number') {\n          this.setState({\n            style: {\n              top: offsetTop,\n            },\n          });\n        }\n      }\n    }, 0);\n  }\n\n  private content(): ComponentChild {\n    if (this.props.column.name !== undefined) {\n      return this.props.column.name;\n    }\n\n    if (this.props.column.plugin !== undefined) {\n      return (\n        <PluginRenderer\n          pluginId={this.props.column.plugin.id}\n          props={{\n            column: this.props.column,\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  private getCustomAttributes(): JSXInternal.HTMLAttributes<HTMLTableCellElement> {\n    const column = this.props.column;\n\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(null, null, this.props.column);\n    } else {\n      return column.attributes;\n    }\n  }\n\n  render() {\n    const props = {};\n\n    if (this.isSortable()) {\n      props['tabIndex'] = 0;\n    }\n\n    return (\n      <th\n        ref={this.thRef}\n        data-column-id={this.props.column && this.props.column.id}\n        className={classJoin(\n          className('th'),\n          this.isSortable() ? className('th', 'sort') : null,\n          this.props.column.fixedHeader ? className('th', 'fixed') : null,\n          this.config.className.th,\n        )}\n        onClick={this.onClick.bind(this)}\n        style={{\n          ...this.config.style.th,\n          ...{\n            minWidth: this.props.column.minWidth,\n            width: this.props.column.width,\n          },\n          ...this.state.style,\n          ...this.props.style,\n        }}\n        onKeyDown={this.keyDown.bind(this)}\n        rowSpan={this.props.rowSpan > 1 ? this.props.rowSpan : undefined}\n        colSpan={this.props.colSpan > 1 ? this.props.colSpan : undefined}\n        {...this.getCustomAttributes()}\n        {...props}\n      >\n        <div className={className('th', 'content')}>{this.content()}</div>\n        {this.isSortable() && (\n          <Sort\n            ref={this.sortRef}\n            index={this.props.index}\n            {...this.props.column.sort}\n          />\n        )}\n        {this.isResizable() &&\n          this.props.index < this.config.header.visibleColumns.length - 1 && (\n            <Resize column={this.props.column} thRef={this.thRef} />\n          )}\n      </th>\n    );\n  }\n}\n", "import { ComponentChild, h } from 'preact';\n\nimport { TR } from './tr';\nimport { BaseComponent, BaseProps } from '../base';\nimport { TH } from './th';\nimport { classJoin, className } from '../../util/className';\nimport Header from '../../header';\nimport { TColumn } from '../../types';\nimport { calculateRowColSpans } from '../../util/table';\n\ninterface THeadProps extends BaseProps {\n  header: Header;\n}\n\nexport class THead extends BaseComponent<THeadProps> {\n  private renderColumn(\n    column: TColumn,\n    rowIndex: number,\n    columnIndex: number,\n    totalRows: number,\n  ): ComponentChild {\n    const { rowSpan, colSpan } = calculateRowColSpans(\n      column,\n      rowIndex,\n      totalRows,\n    );\n\n    return (\n      <TH\n        column={column}\n        index={columnIndex}\n        colSpan={colSpan}\n        rowSpan={rowSpan}\n      />\n    );\n  }\n\n  private renderRow(\n    row: TColumn[],\n    rowIndex: number,\n    totalRows: number,\n  ): ComponentChild {\n    // because the only sortable columns are leaf columns (not parents)\n    const leafColumns = Header.leafColumns(this.props.header.columns);\n\n    return (\n      <TR>\n        {row.map((col) => {\n          if (col.hidden) return null;\n\n          return this.renderColumn(\n            col,\n            rowIndex,\n            leafColumns.indexOf(col),\n            totalRows,\n          );\n        })}\n      </TR>\n    );\n  }\n\n  private renderRows(): ComponentChild {\n    const rows = Header.tabularFormat(this.props.header.columns);\n\n    return rows.map((row, rowIndex) =>\n      this.renderRow(row, rowIndex, rows.length),\n    );\n  }\n\n  render() {\n    if (this.props.header) {\n      return (\n        <thead\n          key={this.props.header.id}\n          className={classJoin(className('thead'), this.config.className.thead)}\n        >\n          {this.renderRows()}\n        </thead>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { TColumn } from '../types';\nimport Header from '../header';\n\nexport function calculateRowColSpans(\n  column: TColumn,\n  rowIndex: number,\n  totalRows: number,\n): { rowSpan: number; colSpan: number } {\n  const depth = Header.maximumDepth(column);\n  const remainingRows = totalRows - rowIndex;\n  const rowSpan = Math.floor(remainingRows - depth - depth / remainingRows);\n  const colSpan = (column.columns && column.columns.length) || 1;\n\n  return {\n    rowSpan: rowSpan,\n    colSpan: colSpan,\n  };\n}\n", "import { h } from 'preact';\n\nimport Tabular from '../../tabular';\nimport { TBody } from './tbody';\nimport { THead } from './thead';\nimport { BaseComponent, BaseProps } from '../base';\nimport Header from '../../header';\nimport { classJoin, className } from '../../util/className';\nimport { Status } from '../../types';\n\ninterface TableProps extends BaseProps {\n  data: Tabular;\n  status: Status;\n  header?: Header;\n  width: string;\n  height: string;\n}\n\nexport class Table extends BaseComponent<TableProps> {\n  render() {\n    return (\n      <table\n        role=\"grid\"\n        className={classJoin(className('table'), this.config.className.table)}\n        style={{\n          ...this.config.style.table,\n          ...{\n            height: this.props.height,\n          },\n        }}\n      >\n        <THead header={this.props.header} />\n        <TBody\n          data={this.props.data}\n          status={this.props.status}\n          header={this.props.header}\n        />\n      </table>\n    );\n  }\n}\n", "import { createRef, h } from 'preact';\n\nimport { BaseComponent } from './base';\nimport { classJoin, className } from '../util/className';\nimport { PluginPosition, PluginRenderer } from '../plugin';\n\ninterface HeaderContainerState {\n  isActive: boolean;\n}\n\nexport class HeaderContainer extends BaseComponent<\n  Record<string, any>,\n  HeaderContainerState\n> {\n  private headerRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isActive: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.headerRef.current.children.length === 0) {\n      this.setState({\n        isActive: false,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.isActive) {\n      return (\n        <div\n          ref={this.headerRef}\n          className={classJoin(className('head'), this.config.className.header)}\n          style={{ ...this.config.style.header }}\n        >\n          <PluginRenderer position={PluginPosition.Header} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { createRef, h } from 'preact';\n\nimport { BaseComponent } from './base';\nimport { classJoin, className } from '../util/className';\nimport { PluginPosition, PluginRenderer } from '../plugin';\n\ninterface FooterContainerState {\n  isActive: boolean;\n}\n\nexport class FooterContainer extends BaseComponent<\n  Record<string, any>,\n  FooterContainerState\n> {\n  private footerRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isActive: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.footerRef.current.children.length === 0) {\n      this.setState({\n        isActive: false,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.isActive) {\n      return (\n        <div\n          ref={this.footerRef}\n          className={classJoin(\n            className('footer'),\n            this.config.className.footer,\n          )}\n          style={{ ...this.config.style.footer }}\n        >\n          <PluginRenderer position={PluginPosition.Footer} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { h, createContext, Context } from 'preact';\n\nimport Tabular from '../tabular';\nimport { BaseComponent, BaseProps } from './base';\nimport { classJoin, className } from '../util/className';\nimport { Status } from '../types';\nimport { Table } from './table/table';\nimport { HeaderContainer } from './headerContainer';\nimport { FooterContainer } from './footerContainer';\nimport Pipeline from '../pipeline/pipeline';\nimport Header from '../header';\nimport { Config } from '../config';\nimport log from '../util/log';\nimport { PipelineProcessor } from '../pipeline/processor';\n\ninterface ContainerProps extends BaseProps {\n  config: Config;\n  pipeline: Pipeline<Tabular>;\n  header?: Header;\n  width: string;\n  height: string;\n}\n\ninterface ContainerState {\n  status: Status;\n  header?: Header;\n  data?: Tabular;\n}\n\nexport class Container extends BaseComponent<ContainerProps, ContainerState> {\n  private readonly configContext: Context<Config>;\n  private processPipelineFn: (processor: PipelineProcessor<any, any>) => void;\n\n  constructor(props, context) {\n    super(props, context);\n\n    // global Config context which is passed to all components\n    this.configContext = createContext(null);\n\n    this.state = {\n      status: Status.Loading,\n      header: props.header,\n      data: null,\n    };\n  }\n\n  private async processPipeline() {\n    this.props.config.eventEmitter.emit('beforeLoad');\n\n    this.setState({\n      status: Status.Loading,\n    });\n\n    try {\n      const data = await this.props.pipeline.process();\n      this.setState({\n        data: data,\n        status: Status.Loaded,\n      });\n\n      this.props.config.eventEmitter.emit('load', data);\n    } catch (e) {\n      log.error(e);\n\n      this.setState({\n        status: Status.Error,\n        data: null,\n      });\n    }\n  }\n\n  async componentDidMount() {\n    const config = this.props.config;\n\n    // for the initial load\n    await this.processPipeline();\n\n    if (config.header && this.state.data && this.state.data.length) {\n      // now that we have the data, let's adjust columns width\n      // NOTE: that we only calculate the columns width once\n      this.setState({\n        header: config.header.adjustWidth(config),\n      });\n    }\n\n    this.processPipelineFn = this.processPipeline.bind(this);\n    this.props.pipeline.on('updated', this.processPipelineFn);\n  }\n\n  componentWillUnmount(): void {\n    this.props.pipeline.off('updated', this.processPipelineFn);\n  }\n\n  componentDidUpdate(\n    _: Readonly<ContainerProps>,\n    previousState: Readonly<ContainerState>,\n  ): void {\n    // we can't jump to the Status.Rendered if previous status is not Status.Loaded\n    if (\n      previousState.status != Status.Rendered &&\n      this.state.status == Status.Loaded\n    ) {\n      this.setState({\n        status: Status.Rendered,\n      });\n\n      this.props.config.eventEmitter.emit('ready');\n    }\n  }\n\n  render() {\n    const configContext = this.configContext;\n\n    return (\n      <configContext.Provider value={this.props.config}>\n        <div\n          role=\"complementary\"\n          className={classJoin(\n            'gridjs',\n            className('container'),\n            this.state.status === Status.Loading ? className('loading') : null,\n            this.props.config.className.container,\n          )}\n          style={{\n            ...this.props.config.style.container,\n            ...{\n              width: this.props.width,\n            },\n          }}\n        >\n          {this.state.status === Status.Loading && (\n            <div className={className('loading-bar')} />\n          )}\n\n          <HeaderContainer />\n\n          <div\n            className={className('wrapper')}\n            style={{ height: this.props.height }}\n          >\n            <Table\n              ref={this.props.config.tableRef}\n              data={this.state.data}\n              header={this.state.header}\n              width={this.props.width}\n              height={this.props.height}\n              status={this.state.status}\n            />\n          </div>\n\n          <FooterContainer />\n\n          <div\n            ref={this.props.config.tempRef}\n            id=\"gridjs-temp\"\n            className={className('temp')}\n          />\n        </div>\n      </configContext.Provider>\n    );\n  }\n}\n", "import { Config, UserConfig } from './config';\nimport { h, render, VNode } from 'preact';\nimport { Container } from './view/container';\nimport log from './util/log';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager } from './plugin';\n\nclass Grid extends EventEmitter<GridEvents> {\n  public config: Config;\n  public plugin: PluginManager;\n\n  constructor(userConfig?: UserConfig) {\n    super();\n    this.config = new Config({ instance: this, eventEmitter: this }).update(\n      userConfig,\n    );\n    this.plugin = this.config.plugin;\n  }\n\n  public updateConfig(userConfig: Partial<UserConfig>): this {\n    this.config.update(userConfig);\n    return this;\n  }\n\n  createElement(): VNode {\n    return h(Container, {\n      config: this.config,\n      pipeline: this.config.pipeline,\n      header: this.config.header,\n      width: this.config.width,\n      height: this.config.height,\n    });\n  }\n\n  /**\n   * Uses the existing container and tries to clear the cache\n   * and re-render the existing Grid.js instance again. This is\n   * useful when a new config is set/updated.\n   *\n   */\n  forceRender(): this {\n    if (!this.config || !this.config.container) {\n      log.error(\n        'Container is empty. Make sure you call render() before forceRender()',\n        true,\n      );\n    }\n\n    // clear the pipeline cache\n    this.config.pipeline.clearCache();\n\n    // TODO: not sure if it's a good idea to render a null element but I couldn't find a better way\n    render(null, this.config.container);\n    render(this.createElement(), this.config.container);\n\n    return this;\n  }\n\n  /**\n   * Mounts the Grid.js instance to the container\n   * and renders the instance\n   *\n   * @param container\n   */\n  render(container: Element): this {\n    if (!container) {\n      log.error('Container element cannot be null', true);\n    }\n\n    if (container.childNodes.length > 0) {\n      log.error(\n        `The container element ${container} is not empty. Make sure the container is empty and call render() again`,\n      );\n      return this;\n    }\n\n    this.config.container = container;\n    render(this.createElement(), container);\n\n    return this;\n  }\n}\n\nexport default Grid;\n"],
  "mappings": "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",
  "names": ["t", "e", "n", "l", "u", "a", "parentNode", "removeChild", "o", "h", "i", "r", "f", "s", "arguments", "length", "children", "defaultProps", "v", "type", "props", "key", "__k", "__b", "__d", "__c", "__h", "constructor", "p", "d", "this", "context", "__", "_", "indexOf", "__e", "k", "base", "push", "debounceRendering", "setTimeout", "g", "__r", "sort", "__v", "some", "__P", "__n", "ownerSVGElement", "z", "y", "b", "w", "x", "Array", "isArray", "C", "j", "c", "ref", "m", "A", "N", "appendChild", "nextSibling", "insertBefore", "$", "setProperty", "test", "style", "cssText", "replace", "toLowerCase", "slice", "addEventListener", "T", "I", "setAttribute", "removeAttribute", "event", "H", "contextType", "value", "__E", "prototype", "render", "O", "state", "getDerivedStateFromProps", "__s", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "diffed", "call", "localName", "nodeType", "createTextNode", "createElementNS", "document", "createElement", "data", "childNodes", "dangerouslySetInnerHTML", "attributes", "name", "__html", "innerHTML", "checked", "current", "unmount", "componentWillUnmount", "firstChild", "Math", "random", "toString", "getDerivedStateFromError", "setState", "componentDidCatch", "forceUpdate", "Base", "id", "_id", "search", "placeholder", "sortDesc", "pagination", "previous", "navigate", "page", "pages", "showing", "noRecordsFound", "error", "Translator", "language", "_language", "_defaultLanguage", "getString", "message", "lang", "split", "val", "join", "translate", "messageFormat", "translated", "BaseComponent", "translator", "_this", "config", "Object", "keys", "HTMLElement", "parentElement", "content", "html", "Cell", "update", "outerHTML", "cast", "Row", "cells", "_cells", "index", "toArray", "map", "cell", "fromCells", "Tabular", "rows", "_rows", "_length", "row", "fromRows", "fromArray", "len", "EventEmitter", "callbacks", "listener", "init", "off", "eventName", "filter", "emit", "ProcessorType", "PipelineProcessor", "_props", "setProps", "process", "args", "validateProps", "Function", "_process", "assign", "GlobalSearchFilter", "keyword", "String", "columns", "ignoreHiddenColumns", "selector", "rowIndex", "cellIndex", "hidden", "element", "RegExp", "tabular", "Filter", "className", "prefix", "reduce", "prev", "cur", "trim", "PluginPosition", "BaseStore", "dispatcher", "_state", "getInitialState", "register", "_handle", "bind", "action", "handle", "payload", "newState", "prevState", "SearchStore", "BaseActions", "dispatch", "SearchActions", "ServerGlobalSearchFilter", "options", "url", "updates", "body", "ServerFilter", "toUpperCase", "throwException", "msg", "format", "Error", "console", "warn", "info", "PluginBaseComponent", "PluginManager", "plugins", "add", "get", "plugin", "log", "remove", "splice", "list", "undefined", "position", "order", "PluginRenderer", "pluginId", "Fragment", "component", "Search", "searchProcessor", "actions", "store", "storeUpdatedFn", "enabled", "storeUpdated", "on", "server", "pipeline", "unregister", "onChange", "target", "func", "onInput", "debounceTimeout", "resolve", "clearTimeout", "timeout", "classJoin", "PaginationLimit", "isNaN", "Number", "limit", "Limit", "ServerPaginationLimit", "ServerLimit", "Pagination", "processor", "onUpdateFn", "setTotalFromTabularFn", "total", "setTotalFromTabular", "setTotal", "onUpdate", "resetPageOnUpdate", "setPage", "totalRows", "renderPages", "buttonsCount", "maxCount", "min", "pagePivot", "floor", "tabIndex", "role", "onClick", "paginationButton", "from", "_this3", "paginationButtonCurrent", "title", "renderSummary", "summary", "paginationSummary", "prevButton", "disabled", "paginationButtonPrev", "nextButton", "paginationButtonNext", "ceil", "width", "containerWidth", "parseInt", "ShadowTable", "tableElement", "tableClassName", "tableStyle", "tableRef", "cloneNode", "visibility", "widths", "tableLayout", "padding", "margin", "border", "querySelectorAll", "clientWidth", "getAttribute", "minWidth", "nodeElement", "_this2", "str", "word", "charAt", "Header", "_columns", "adjustWidth", "container", "tempRef", "shadowTable", "el", "tabularFormat", "concat", "column", "px", "autoWidth", "setSort", "userConfig", "setFixedHeader", "fixedHeader", "setResizable", "resizable", "setID", "populatePlugins", "fromColumns", "header", "typedColumn", "fromUserConfig", "fromHTMLTable", "querySelector", "th", "result", "nextRow", "cols", "col", "leafColumns", "maximumDepth", "Dispatcher", "_callbacks", "_isDispatching", "_isHandled", "_isPending", "_lastID", "_pendingPayload", "waitFor", "ids", "ii", "_invokeCallback", "_startDispatching", "_stopDispatching", "isDispatching", "Storage", "MemoryStorage", "set", "ServerStorage", "handler", "response", "json", "status", "statusText", "opts", "fetch", "then", "res", "StorageUtils", "createFromUserConfig", "storage", "tableElementToArray", "display", "parsedRow", "TEXT_NODE", "parseFromString", "documentElement", "textContent", "_settle", "onFulfilled", "onRejected", "thenable", "Status", "Pipeline", "steps", "Map", "cache", "lastProcessorIndexUpdated", "step", "clearCache", "processorPropsUpdated", "addProcessorByPriority", "afterRegistered", "subSteps", "_steps", "proc", "priority", "newSubStep", "first", "second", "getStepsByType", "getSortedProcessorTypes", "pact", "processorIndex", "findProcessorIndexByID", "setLastProcessorIndex", "StorageExtractor", "Extractor", "ArrayToTabularTransformer", "arrayResponse", "Transformer", "ServerInitiator", "entries", "serverStorageOptions", "acc", "Initiator", "StorageResponseToArrayTransformer", "castData", "pad", "storageResponse", "PipelineUtils", "createFromConfig", "Config", "_userConfig", "defaultConfig", "updatedConfig", "height", "multiColumn", "Footer", "TD", "formatter", "handleClick", "messageCell", "eventEmitter", "getCustomAttributes", "colSpan", "td", "TR", "getColumn", "messageRow", "getChildren", "tr", "MessageRow", "TBody", "headerLength", "visibleColumns", "tbody", "Loading", "loading", "Rendered", "notfound", "NativeSort", "condition", "direction", "compare", "cellA", "cellB", "compareWrapper", "cmp", "sortedRows", "sorted", "Sort", "SortStore", "sortColumn", "multi", "sortToggle", "find", "count", "reset", "SortActions", "ServerSort", "sortProcessor", "updateStateFn", "updateSortProcessorFn", "getOrCreateSortProcessor", "updateState", "currentColumn", "updateSortProcessor", "sortedColumns", "processorType", "changeDirection", "preventDefault", "stopPropagation", "shiftKey", "sortClassName", "Resize", "moveFn", "upFn", "getPageX", "MouseEvent", "pageX", "changedTouches", "fn", "offsetStart", "thRef", "end", "lastFn", "Date", "now", "lastTime", "wait", "max", "inThrottle", "move", "removeEventListener", "onMouseDown", "start", "onTouchStart", "TH", "sortRef", "isSortable", "isResizable", "keyDown", "which", "offsetTop", "onKeyDown", "rowSpan", "THead", "renderColumn", "depth", "remainingRows", "renderRows", "renderRow", "Table", "table", "HeaderContainer", "headerRef", "isActive", "FooterContainer", "footerRef", "footer", "Container", "configContext", "processPipelineFn", "Consumer", "Provider", "createContext", "processPipeline", "Loaded", "_this5", "previousState", "Grid", "instance", "updateConfig", "forceRender", "__H", "__V", "shift", "__N", "requestAnimationFrame", "cancelAnimationFrame"]
}
