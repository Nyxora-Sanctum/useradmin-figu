import {
  __commonJS
} from "./chunk-JJ3PYKI2.js";

// node_modules/simplebar/dist/simplebar.js
var require_simplebar = __commonJS({
  "node_modules/simplebar/dist/simplebar.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = global2 || self, global2.SimpleBar = factory());
    })(exports, function() {
      "use strict";
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function createCommonjsModule(fn, module2) {
        return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
      }
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      var global_1 = (
        // eslint-disable-next-line es-x/no-global-this -- safe
        check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
        check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
        /* @__PURE__ */ function() {
          return this;
        }() || Function("return this")()
      );
      var defineProperty = Object.defineProperty;
      var defineGlobalProperty = function(key, value) {
        try {
          defineProperty(global_1, key, { value, configurable: true, writable: true });
        } catch (error) {
          global_1[key] = value;
        }
        return value;
      };
      var SHARED = "__core-js_shared__";
      var store = global_1[SHARED] || defineGlobalProperty(SHARED, {});
      var sharedStore = store;
      var shared = createCommonjsModule(function(module2) {
        (module2.exports = function(key, value) {
          return sharedStore[key] || (sharedStore[key] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: "3.22.6",
          mode: "global",
          copyright: "Â© 2014-2022 Denis Pushkarev (zloirock.ru)",
          license: "https://github.com/zloirock/core-js/blob/v3.22.6/LICENSE",
          source: "https://github.com/zloirock/core-js"
        });
      });
      var fails = function(exec2) {
        try {
          return !!exec2();
        } catch (error) {
          return true;
        }
      };
      var functionBindNative = !fails(function() {
        var test2 = (function() {
        }).bind();
        return typeof test2 != "function" || test2.hasOwnProperty("prototype");
      });
      var FunctionPrototype = Function.prototype;
      var bind = FunctionPrototype.bind;
      var call = FunctionPrototype.call;
      var uncurryThis = functionBindNative && bind.bind(call, call);
      var functionUncurryThis = functionBindNative ? function(fn) {
        return fn && uncurryThis(fn);
      } : function(fn) {
        return fn && function() {
          return call.apply(fn, arguments);
        };
      };
      var TypeError$1 = global_1.TypeError;
      var requireObjectCoercible = function(it) {
        if (it == void 0) throw TypeError$1("Can't call method on " + it);
        return it;
      };
      var Object$1 = global_1.Object;
      var toObject = function(argument) {
        return Object$1(requireObjectCoercible(argument));
      };
      var hasOwnProperty = functionUncurryThis({}.hasOwnProperty);
      var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
      var id = 0;
      var postfix = Math.random();
      var toString = functionUncurryThis(1 .toString);
      var uid = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
      var isCallable = function(argument) {
        return typeof argument == "function";
      };
      var aFunction = function(argument) {
        return isCallable(argument) ? argument : void 0;
      };
      var getBuiltIn = function(namespace, method) {
        return arguments.length < 2 ? aFunction(global_1[namespace]) : global_1[namespace] && global_1[namespace][method];
      };
      var engineUserAgent = getBuiltIn("navigator", "userAgent") || "";
      var process = global_1.process;
      var Deno = global_1.Deno;
      var versions = process && process.versions || Deno && Deno.version;
      var v8 = versions && versions.v8;
      var match, version;
      if (v8) {
        match = v8.split(".");
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version && engineUserAgent) {
        match = engineUserAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = engineUserAgent.match(/Chrome\/(\d+)/);
          if (match) version = +match[1];
        }
      }
      var engineV8Version = version;
      var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && engineV8Version && engineV8Version < 41;
      });
      var useSymbolAsUid = nativeSymbol && !Symbol.sham && typeof Symbol.iterator == "symbol";
      var WellKnownSymbolsStore = shared("wks");
      var Symbol$1 = global_1.Symbol;
      var symbolFor = Symbol$1 && Symbol$1["for"];
      var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;
      var wellKnownSymbol = function(name) {
        if (!hasOwnProperty_1(WellKnownSymbolsStore, name) || !(nativeSymbol || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (nativeSymbol && hasOwnProperty_1(Symbol$1, name)) {
            WellKnownSymbolsStore[name] = Symbol$1[name];
          } else if (useSymbolAsUid && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      var toStringTagSupport = String(test) === "[object z]";
      var descriptors = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
      var isObject = function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
      var document$1 = global_1.document;
      var EXISTS = isObject(document$1) && isObject(document$1.createElement);
      var documentCreateElement = function(it) {
        return EXISTS ? document$1.createElement(it) : {};
      };
      var ie8DomDefine = !descriptors && !fails(function() {
        return Object.defineProperty(documentCreateElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
      var v8PrototypeDefineBug = descriptors && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
      var String$1 = global_1.String;
      var TypeError$2 = global_1.TypeError;
      var anObject = function(argument) {
        if (isObject(argument)) return argument;
        throw TypeError$2(String$1(argument) + " is not an object");
      };
      var call$1 = Function.prototype.call;
      var functionCall = functionBindNative ? call$1.bind(call$1) : function() {
        return call$1.apply(call$1, arguments);
      };
      var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);
      var Object$2 = global_1.Object;
      var isSymbol = useSymbolAsUid ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$2(it));
      };
      var String$2 = global_1.String;
      var tryToString = function(argument) {
        try {
          return String$2(argument);
        } catch (error) {
          return "Object";
        }
      };
      var TypeError$3 = global_1.TypeError;
      var aCallable = function(argument) {
        if (isCallable(argument)) return argument;
        throw TypeError$3(tryToString(argument) + " is not a function");
      };
      var getMethod = function(V, P) {
        var func = V[P];
        return func == null ? void 0 : aCallable(func);
      };
      var TypeError$4 = global_1.TypeError;
      var ordinaryToPrimitive = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
        throw TypeError$4("Can't convert object to primitive value");
      };
      var TypeError$5 = global_1.TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      var toPrimitive = function(input, pref) {
        if (!isObject(input) || isSymbol(input)) return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0) pref = "default";
          result = functionCall(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result)) return result;
          throw TypeError$5("Can't convert object to primitive value");
        }
        if (pref === void 0) pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
      var toPropertyKey = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
      var TypeError$6 = global_1.TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      var f = descriptors ? v8PrototypeDefineBug ? function defineProperty2(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty2(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (ie8DomDefine) try {
          return $defineProperty(O, P, Attributes);
        } catch (error) {
        }
        if ("get" in Attributes || "set" in Attributes) throw TypeError$6("Accessors not supported");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
      };
      var objectDefineProperty = {
        f
      };
      var createPropertyDescriptor = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
      var createNonEnumerableProperty = descriptors ? function(object, key, value) {
        return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
      var FunctionPrototype$1 = Function.prototype;
      var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;
      var EXISTS$1 = hasOwnProperty_1(FunctionPrototype$1, "name");
      var PROPER = EXISTS$1 && (function something() {
      }).name === "something";
      var CONFIGURABLE$1 = EXISTS$1 && (!descriptors || descriptors && getDescriptor(FunctionPrototype$1, "name").configurable);
      var functionName = {
        EXISTS: EXISTS$1,
        PROPER,
        CONFIGURABLE: CONFIGURABLE$1
      };
      var functionToString = functionUncurryThis(Function.toString);
      if (!isCallable(sharedStore.inspectSource)) {
        sharedStore.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      var inspectSource = sharedStore.inspectSource;
      var WeakMap$1 = global_1.WeakMap;
      var nativeWeakMap = isCallable(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));
      var keys = shared("keys");
      var sharedKey = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
      var hiddenKeys = {};
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError$7 = global_1.TypeError;
      var WeakMap$2 = global_1.WeakMap;
      var set, get, has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError$7("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (nativeWeakMap || sharedStore.state) {
        var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$2());
        var wmget = functionUncurryThis(store$1.get);
        var wmhas = functionUncurryThis(store$1.has);
        var wmset = functionUncurryThis(store$1.set);
        set = function(it, metadata) {
          if (wmhas(store$1, it)) throw new TypeError$7(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          wmset(store$1, it, metadata);
          return metadata;
        };
        get = function(it) {
          return wmget(store$1, it) || {};
        };
        has = function(it) {
          return wmhas(store$1, it);
        };
      } else {
        var STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwnProperty_1(it, STATE)) throw new TypeError$7(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwnProperty_1(it, STATE);
        };
      }
      var internalState = {
        set,
        get,
        has,
        enforce,
        getterFor
      };
      var makeBuiltIn_1 = createCommonjsModule(function(module2) {
        var CONFIGURABLE_FUNCTION_NAME2 = functionName.CONFIGURABLE;
        var enforceInternalState2 = internalState.enforce;
        var getInternalState2 = internalState.get;
        var defineProperty2 = Object.defineProperty;
        var CONFIGURABLE_LENGTH = descriptors && !fails(function() {
          return defineProperty2(function() {
          }, "length", { value: 8 }).length !== 8;
        });
        var TEMPLATE = String(String).split("String");
        var makeBuiltIn = module2.exports = function(value, name, options) {
          if (String(name).slice(0, 7) === "Symbol(") {
            name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
          }
          if (options && options.getter) name = "get " + name;
          if (options && options.setter) name = "set " + name;
          if (!hasOwnProperty_1(value, "name") || CONFIGURABLE_FUNCTION_NAME2 && value.name !== name) {
            defineProperty2(value, "name", { value: name, configurable: true });
          }
          if (CONFIGURABLE_LENGTH && options && hasOwnProperty_1(options, "arity") && value.length !== options.arity) {
            defineProperty2(value, "length", { value: options.arity });
          }
          if (options && hasOwnProperty_1(options, "constructor") && options.constructor) {
            if (descriptors) try {
              defineProperty2(value, "prototype", { writable: false });
            } catch (error) {
            }
          } else value.prototype = void 0;
          var state = enforceInternalState2(value);
          if (!hasOwnProperty_1(state, "source")) {
            state.source = TEMPLATE.join(typeof name == "string" ? name : "");
          }
          return value;
        };
        Function.prototype.toString = makeBuiltIn(function toString2() {
          return isCallable(this) && getInternalState2(this).source || inspectSource(this);
        }, "toString");
      });
      var defineBuiltIn = function(O, key, value, options) {
        if (!options) options = {};
        var simple = options.enumerable;
        var name = options.name !== void 0 ? options.name : key;
        if (isCallable(value)) makeBuiltIn_1(value, name, options);
        if (options.global) {
          if (simple) O[key] = value;
          else defineGlobalProperty(key, value);
        } else {
          if (!options.unsafe) delete O[key];
          else if (O[key]) simple = true;
          if (simple) O[key] = value;
          else createNonEnumerableProperty(O, key, value);
        }
        return O;
      };
      var toString$1 = functionUncurryThis({}.toString);
      var stringSlice = functionUncurryThis("".slice);
      var classofRaw = function(it) {
        return stringSlice(toString$1(it), 8, -1);
      };
      var TO_STRING_TAG$1 = wellKnownSymbol("toStringTag");
      var Object$3 = global_1.Object;
      var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      var classof = toStringTagSupport ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object$3(it), TO_STRING_TAG$1)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
      var objectToString = toStringTagSupport ? {}.toString : function toString2() {
        return "[object " + classof(this) + "]";
      };
      if (!toStringTagSupport) {
        defineBuiltIn(Object.prototype, "toString", objectToString, { unsafe: true });
      }
      var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
      var classList = documentCreateElement("span").classList;
      var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
      var domTokenListPrototype = DOMTokenListPrototype === Object.prototype ? void 0 : DOMTokenListPrototype;
      var bind$1 = functionUncurryThis(functionUncurryThis.bind);
      var functionBindContext = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : functionBindNative ? bind$1(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
      var Object$4 = global_1.Object;
      var split = functionUncurryThis("".split);
      var indexedObject = fails(function() {
        return !Object$4("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classofRaw(it) == "String" ? split(it, "") : Object$4(it);
      } : Object$4;
      var ceil = Math.ceil;
      var floor = Math.floor;
      var mathTrunc = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor : ceil)(n);
      };
      var toIntegerOrInfinity = function(argument) {
        var number = +argument;
        return number !== number || number === 0 ? 0 : mathTrunc(number);
      };
      var min = Math.min;
      var toLength = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
      var lengthOfArrayLike = function(obj) {
        return toLength(obj.length);
      };
      var isArray = Array.isArray || function isArray2(argument) {
        return classofRaw(argument) == "Array";
      };
      var noop = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = functionUncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
      var isConstructorModern = function isConstructor2(argument) {
        if (!isCallable(argument)) return false;
        try {
          construct(noop, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor2(argument) {
        if (!isCallable(argument)) return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      var isConstructor = !construct || fails(function() {
        var called2;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called2 = true;
        }) || called2;
      }) ? isConstructorLegacy : isConstructorModern;
      var SPECIES = wellKnownSymbol("species");
      var Array$1 = global_1.Array;
      var arraySpeciesConstructor = function(originalArray) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === Array$1 || isArray(C.prototype))) C = void 0;
          else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = void 0;
          }
        }
        return C === void 0 ? Array$1 : C;
      };
      var arraySpeciesCreate = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
      var push = functionUncurryThis([].push);
      var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self2 = indexedObject(O);
          var boundFunction = functionBindContext(callbackfn, that);
          var length = lengthOfArrayLike(self2);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
          var value, result;
          for (; length > index; index++) if (NO_HOLES || index in self2) {
            value = self2[index];
            result = boundFunction(value, index, O);
            if (TYPE) {
              if (IS_MAP) target[index] = result;
              else if (result) switch (TYPE) {
                case 3:
                  return true;
                // some
                case 5:
                  return value;
                // find
                case 6:
                  return index;
                // findIndex
                case 2:
                  push(target, value);
              }
              else switch (TYPE) {
                case 4:
                  return false;
                // every
                case 7:
                  push(target, value);
              }
            }
          }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6),
        // `Array.prototype.filterReject` method
        // https://github.com/tc39/proposal-array-filtering
        filterReject: createMethod(7)
      };
      var arrayMethodIsStrict = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
          method.call(null, argument || function() {
            return 1;
          }, 1);
        });
      };
      var $forEach = arrayIteration.forEach;
      var STRICT_METHOD = arrayMethodIsStrict("forEach");
      var arrayForEach = !STRICT_METHOD ? function forEach(callbackfn) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      } : [].forEach;
      var handlePrototype = function(CollectionPrototype) {
        if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
          createNonEnumerableProperty(CollectionPrototype, "forEach", arrayForEach);
        } catch (error) {
          CollectionPrototype.forEach = arrayForEach;
        }
      };
      for (var COLLECTION_NAME in domIterables) {
        if (domIterables[COLLECTION_NAME]) {
          handlePrototype(global_1[COLLECTION_NAME] && global_1[COLLECTION_NAME].prototype);
        }
      }
      handlePrototype(domTokenListPrototype);
      var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
      var canUseDom = canUseDOM;
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      var f$1 = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
      var objectPropertyIsEnumerable = {
        f: f$1
      };
      var toIndexedObject = function(it) {
        return indexedObject(requireObjectCoercible(it));
      };
      var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
      var f$2 = descriptors ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor2(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (ie8DomDefine) try {
          return $getOwnPropertyDescriptor$1(O, P);
        } catch (error) {
        }
        if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
      };
      var objectGetOwnPropertyDescriptor = {
        f: f$2
      };
      var max = Math.max;
      var min$1 = Math.min;
      var toAbsoluteIndex = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
      };
      var createMethod$1 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++];
            if (value != value) return true;
          }
          else for (; length > index; index++) {
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };
      var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod$1(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$1(false)
      };
      var indexOf = arrayIncludes.indexOf;
      var push$1 = functionUncurryThis([].push);
      var objectKeysInternal = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O) !hasOwnProperty_1(hiddenKeys, key) && hasOwnProperty_1(O, key) && push$1(result, key);
        while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
          ~indexOf(result, key) || push$1(result, key);
        }
        return result;
      };
      var enumBugKeys = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
      var hiddenKeys$1 = enumBugKeys.concat("length", "prototype");
      var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return objectKeysInternal(O, hiddenKeys$1);
      };
      var objectGetOwnPropertyNames = {
        f: f$3
      };
      var f$4 = Object.getOwnPropertySymbols;
      var objectGetOwnPropertySymbols = {
        f: f$4
      };
      var concat = functionUncurryThis([].concat);
      var ownKeys = getBuiltIn("Reflect", "ownKeys") || function ownKeys2(it) {
        var keys2 = objectGetOwnPropertyNames.f(anObject(it));
        var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
        return getOwnPropertySymbols ? concat(keys2, getOwnPropertySymbols(it)) : keys2;
      };
      var copyConstructorProperties = function(target, source, exceptions) {
        var keys2 = ownKeys(source);
        var defineProperty2 = objectDefineProperty.f;
        var getOwnPropertyDescriptor2 = objectGetOwnPropertyDescriptor.f;
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          if (!hasOwnProperty_1(target, key) && !(exceptions && hasOwnProperty_1(exceptions, key))) {
            defineProperty2(target, key, getOwnPropertyDescriptor2(source, key));
          }
        }
      };
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      var isForced_1 = isForced;
      var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
      var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED2, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = global_1;
        } else if (STATIC) {
          target = global_1[TARGET] || defineGlobalProperty(TARGET, {});
        } else {
          target = (global_1[TARGET] || {}).prototype;
        }
        if (target) for (key in source) {
          sourceProperty = source[key];
          if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor$1(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];
          FORCED2 = isForced_1(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
          if (!FORCED2 && targetProperty !== void 0) {
            if (typeof sourceProperty == typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          }
          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, "sham", true);
          }
          defineBuiltIn(target, key, sourceProperty, options);
        }
      };
      var String$3 = global_1.String;
      var toString_1 = function(argument) {
        if (classof(argument) === "Symbol") throw TypeError("Cannot convert a Symbol value to a string");
        return String$3(argument);
      };
      var whitespaces = "	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF";
      var replace = functionUncurryThis("".replace);
      var whitespace = "[" + whitespaces + "]";
      var ltrim = RegExp("^" + whitespace + whitespace + "*");
      var rtrim = RegExp(whitespace + whitespace + "*$");
      var createMethod$2 = function(TYPE) {
        return function($this) {
          var string = toString_1(requireObjectCoercible($this));
          if (TYPE & 1) string = replace(string, ltrim, "");
          if (TYPE & 2) string = replace(string, rtrim, "");
          return string;
        };
      };
      var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod$2(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod$2(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod$2(3)
      };
      var trim = stringTrim.trim;
      var $parseInt = global_1.parseInt;
      var Symbol$2 = global_1.Symbol;
      var ITERATOR = Symbol$2 && Symbol$2.iterator;
      var hex = /^[+-]?0x/i;
      var exec$1 = functionUncurryThis(hex.exec);
      var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
        $parseInt(Object(ITERATOR));
      });
      var numberParseInt = FORCED ? function parseInt2(string, radix) {
        var S = trim(toString_1(string));
        return $parseInt(S, radix >>> 0 || (exec$1(hex, S) ? 16 : 10));
      } : $parseInt;
      _export({ global: true, forced: parseInt != numberParseInt }, {
        parseInt: numberParseInt
      });
      var objectKeys = Object.keys || function keys2(O) {
        return objectKeysInternal(O, enumBugKeys);
      };
      var $assign = Object.assign;
      var defineProperty$1 = Object.defineProperty;
      var concat$1 = functionUncurryThis([].concat);
      var objectAssign = !$assign || fails(function() {
        if (descriptors && $assign({ b: 1 }, $assign(defineProperty$1({}, "a", {
          enumerable: true,
          get: function() {
            defineProperty$1(this, "b", {
              value: 3,
              enumerable: false
            });
          }
        }), { b: 2 })).b !== 1) return true;
        var A = {};
        var B = {};
        var symbol = Symbol();
        var alphabet = "abcdefghijklmnopqrst";
        A[symbol] = 7;
        alphabet.split("").forEach(function(chr) {
          B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join("") != alphabet;
      }) ? function assign(target, source) {
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
        var propertyIsEnumerable = objectPropertyIsEnumerable.f;
        while (argumentsLength > index) {
          var S = indexedObject(arguments[index++]);
          var keys2 = getOwnPropertySymbols ? concat$1(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys2.length;
          var j = 0;
          var key;
          while (length > j) {
            key = keys2[j++];
            if (!descriptors || functionCall(propertyIsEnumerable, S, key)) T[key] = S[key];
          }
        }
        return T;
      } : $assign;
      _export({ target: "Object", stat: true, arity: 2, forced: Object.assign !== objectAssign }, {
        assign: objectAssign
      });
      var SPECIES$1 = wellKnownSymbol("species");
      var arrayMethodHasSpeciesSupport = function(METHOD_NAME) {
        return engineV8Version >= 51 || !fails(function() {
          var array = [];
          var constructor = array.constructor = {};
          constructor[SPECIES$1] = function() {
            return { foo: 1 };
          };
          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
      var $filter = arrayIteration.filter;
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
      _export({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        filter: function filter(callbackfn) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      var f$5 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys2 = objectKeys(Properties);
        var length = keys2.length;
        var index = 0;
        var key;
        while (length > index) objectDefineProperty.f(O, key = keys2[index++], props[key]);
        return O;
      };
      var objectDefineProperties = {
        f: f$5
      };
      var html = getBuiltIn("document", "documentElement");
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else result = NullProtoObject();
        return Properties === void 0 ? result : objectDefineProperties.f(result, Properties);
      };
      var defineProperty$2 = objectDefineProperty.f;
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] == void 0) {
        defineProperty$2(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: objectCreate(null)
        });
      }
      var addToUnscopables = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
      var iterators = {};
      var correctPrototypeGetter = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
      var IE_PROTO$1 = sharedKey("IE_PROTO");
      var Object$5 = global_1.Object;
      var ObjectPrototype = Object$5.prototype;
      var objectGetPrototypeOf = correctPrototypeGetter ? Object$5.getPrototypeOf : function(O) {
        var object = toObject(O);
        if (hasOwnProperty_1(object, IE_PROTO$1)) return object[IE_PROTO$1];
        var constructor = object.constructor;
        if (isCallable(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof Object$5 ? ObjectPrototype : null;
      };
      var ITERATOR$1 = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
        var test2 = {};
        return IteratorPrototype[ITERATOR$1].call(test2) !== test2;
      });
      if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
      if (!isCallable(IteratorPrototype[ITERATOR$1])) {
        defineBuiltIn(IteratorPrototype, ITERATOR$1, function() {
          return this;
        });
      }
      var iteratorsCore = {
        IteratorPrototype,
        BUGGY_SAFARI_ITERATORS
      };
      var defineProperty$3 = objectDefineProperty.f;
      var TO_STRING_TAG$2 = wellKnownSymbol("toStringTag");
      var setToStringTag = function(target, TAG, STATIC) {
        if (target && !STATIC) target = target.prototype;
        if (target && !hasOwnProperty_1(target, TO_STRING_TAG$2)) {
          defineProperty$3(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
        }
      };
      var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
      var returnThis = function() {
        return this;
      };
      var createIteratorConstructor = function(IteratorConstructor, NAME2, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG2 = NAME2 + " Iterator";
        IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG2, false);
        iterators[TO_STRING_TAG2] = returnThis;
        return IteratorConstructor;
      };
      var String$4 = global_1.String;
      var TypeError$8 = global_1.TypeError;
      var aPossiblePrototype = function(argument) {
        if (typeof argument == "object" || isCallable(argument)) return argument;
        throw TypeError$8("Can't set " + String$4(argument) + " as a prototype");
      };
      var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test2 = {};
        var setter;
        try {
          setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
          setter(test2, []);
          CORRECT_SETTER = test2 instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER) setter(O, proto);
          else O.__proto__ = proto;
          return O;
        };
      }() : void 0);
      var PROPER_FUNCTION_NAME = functionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
      var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR$2 = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis$1 = function() {
        return this;
      };
      var defineIterator = function(Iterable, NAME2, IteratorConstructor, next, DEFAULT, IS_SET, FORCED2) {
        createIteratorConstructor(IteratorConstructor, NAME2, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator) return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys2() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values2() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG2 = NAME2 + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$2] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME2 == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
              if (objectSetPrototypeOf) {
                objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$2])) {
                defineBuiltIn(CurrentIteratorPrototype, ITERATOR$2, returnThis$1);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG2, true);
          }
        }
        if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          if (CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(IterablePrototype, "name", VALUES);
          } else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values2() {
              return functionCall(nativeIterator, this);
            };
          }
        }
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED2) for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
            }
          }
          else _export({ target: NAME2, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
        }
        if (IterablePrototype[ITERATOR$2] !== defaultIterator) {
          defineBuiltIn(IterablePrototype, ITERATOR$2, defaultIterator, { name: DEFAULT });
        }
        iterators[NAME2] = defaultIterator;
        return methods;
      };
      var defineProperty$4 = objectDefineProperty.f;
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = internalState.set;
      var getInternalState = internalState.getterFor(ARRAY_ITERATOR);
      var es_array_iterator = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind
          // kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return { value: void 0, done: true };
        }
        if (kind == "keys") return { value: index, done: false };
        if (kind == "values") return { value: target[index], done: false };
        return { value: [index, target[index]], done: false };
      }, "values");
      var values = iterators.Arguments = iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
      if (descriptors && values.name !== "values") try {
        defineProperty$4(values, "name", { value: "values" });
      } catch (error) {
      }
      var charAt = functionUncurryThis("".charAt);
      var charCodeAt = functionUncurryThis("".charCodeAt);
      var stringSlice$1 = functionUncurryThis("".slice);
      var createMethod$3 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString_1(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size2 = S.length;
          var first, second;
          if (position < 0 || position >= size2) return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size2 || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice$1(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$3(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$3(true)
      };
      var charAt$1 = stringMultibyte.charAt;
      var STRING_ITERATOR = "String Iterator";
      var setInternalState$1 = internalState.set;
      var getInternalState$1 = internalState.getterFor(STRING_ITERATOR);
      defineIterator(String, "String", function(iterated) {
        setInternalState$1(this, {
          type: STRING_ITERATOR,
          string: toString_1(iterated),
          index: 0
        });
      }, function next() {
        var state = getInternalState$1(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return { value: void 0, done: true };
        point = charAt$1(string, index);
        state.index += point.length;
        return { value: point, done: false };
      });
      var defineBuiltIns = function(target, src, options) {
        for (var key in src) defineBuiltIn(target, key, src[key], options);
        return target;
      };
      var createProperty = function(object, key, value) {
        var propertyKey = toPropertyKey(key);
        if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
        else object[propertyKey] = value;
      };
      var Array$2 = global_1.Array;
      var max$1 = Math.max;
      var arraySliceSimple = function(O, start, end) {
        var length = lengthOfArrayLike(O);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var result = Array$2(max$1(fin - k, 0));
        for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
        result.length = n;
        return result;
      };
      var $getOwnPropertyNames = objectGetOwnPropertyNames.f;
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return $getOwnPropertyNames(it);
        } catch (error) {
          return arraySliceSimple(windowNames);
        }
      };
      var f$6 = function getOwnPropertyNames(it) {
        return windowNames && classofRaw(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
      };
      var objectGetOwnPropertyNamesExternal = {
        f: f$6
      };
      var arrayBufferNonExtensible = fails(function() {
        if (typeof ArrayBuffer == "function") {
          var buffer = new ArrayBuffer(8);
          if (Object.isExtensible(buffer)) Object.defineProperty(buffer, "a", { value: 8 });
        }
      });
      var $isExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $isExtensible(1);
      });
      var objectIsExtensible = FAILS_ON_PRIMITIVES || arrayBufferNonExtensible ? function isExtensible(it) {
        if (!isObject(it)) return false;
        if (arrayBufferNonExtensible && classofRaw(it) == "ArrayBuffer") return false;
        return $isExtensible ? $isExtensible(it) : true;
      } : $isExtensible;
      var freezing = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      });
      var internalMetadata = createCommonjsModule(function(module2) {
        var defineProperty2 = objectDefineProperty.f;
        var REQUIRED = false;
        var METADATA = uid("meta");
        var id2 = 0;
        var setMetadata = function(it) {
          defineProperty2(it, METADATA, { value: {
            objectID: "O" + id2++,
            // object ID
            weakData: {}
            // weak collections IDs
          } });
        };
        var fastKey = function(it, create) {
          if (!isObject(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
          if (!hasOwnProperty_1(it, METADATA)) {
            if (!objectIsExtensible(it)) return "F";
            if (!create) return "E";
            setMetadata(it);
          }
          return it[METADATA].objectID;
        };
        var getWeakData2 = function(it, create) {
          if (!hasOwnProperty_1(it, METADATA)) {
            if (!objectIsExtensible(it)) return true;
            if (!create) return false;
            setMetadata(it);
          }
          return it[METADATA].weakData;
        };
        var onFreeze = function(it) {
          if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
          return it;
        };
        var enable = function() {
          meta.enable = function() {
          };
          REQUIRED = true;
          var getOwnPropertyNames = objectGetOwnPropertyNames.f;
          var splice2 = functionUncurryThis([].splice);
          var test2 = {};
          test2[METADATA] = 1;
          if (getOwnPropertyNames(test2).length) {
            objectGetOwnPropertyNames.f = function(it) {
              var result = getOwnPropertyNames(it);
              for (var i = 0, length = result.length; i < length; i++) {
                if (result[i] === METADATA) {
                  splice2(result, i, 1);
                  break;
                }
              }
              return result;
            };
            _export({ target: "Object", stat: true, forced: true }, {
              getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
            });
          }
        };
        var meta = module2.exports = {
          enable,
          fastKey,
          getWeakData: getWeakData2,
          onFreeze
        };
        hiddenKeys[METADATA] = true;
      });
      var internalMetadata_1 = internalMetadata.enable;
      var internalMetadata_2 = internalMetadata.fastKey;
      var internalMetadata_3 = internalMetadata.getWeakData;
      var internalMetadata_4 = internalMetadata.onFreeze;
      var ITERATOR$3 = wellKnownSymbol("iterator");
      var ArrayPrototype$1 = Array.prototype;
      var isArrayIteratorMethod = function(it) {
        return it !== void 0 && (iterators.Array === it || ArrayPrototype$1[ITERATOR$3] === it);
      };
      var ITERATOR$4 = wellKnownSymbol("iterator");
      var getIteratorMethod = function(it) {
        if (it != void 0) return getMethod(it, ITERATOR$4) || getMethod(it, "@@iterator") || iterators[classof(it)];
      };
      var TypeError$9 = global_1.TypeError;
      var getIterator = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
        if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
        throw TypeError$9(tryToString(argument) + " is not iterable");
      };
      var iteratorClose = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject(iterator);
        try {
          innerResult = getMethod(iterator, "return");
          if (!innerResult) {
            if (kind === "throw") throw value;
            return value;
          }
          innerResult = functionCall(innerResult, iterator);
        } catch (error) {
          innerError = true;
          innerResult = error;
        }
        if (kind === "throw") throw value;
        if (innerError) throw innerResult;
        anObject(innerResult);
        return value;
      };
      var TypeError$a = global_1.TypeError;
      var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };
      var ResultPrototype = Result.prototype;
      var iterate = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = functionBindContext(unboundFunction, that);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
          if (iterator) iteratorClose(iterator, "normal", condition);
          return new Result(true, condition);
        };
        var callFn = function(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }
          return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (!iterFn) throw TypeError$a(tryToString(iterable) + " is not iterable");
          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
            }
            return new Result(false);
          }
          iterator = getIterator(iterable, iterFn);
        }
        next = iterator.next;
        while (!(step = functionCall(next, iterator)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator, "throw", error);
          }
          if (typeof result == "object" && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
        }
        return new Result(false);
      };
      var TypeError$b = global_1.TypeError;
      var anInstance = function(it, Prototype) {
        if (objectIsPrototypeOf(Prototype, it)) return it;
        throw TypeError$b("Incorrect invocation");
      };
      var ITERATOR$5 = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        var called = 0;
        var iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR$5] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var checkCorrectnessOfIteration = function(exec2, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR$5] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec2(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
      var inheritIfRequired = function($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if (
          // it can work only with native `setPrototypeOf`
          objectSetPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
          isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
        ) objectSetPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
      var collection = function(CONSTRUCTOR_NAME, wrapper2, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global_1[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var exported = {};
        var fixMethod = function(KEY) {
          var uncurriedNativeMethod = functionUncurryThis(NativePrototype[KEY]);
          defineBuiltIn(
            NativePrototype,
            KEY,
            KEY == "add" ? function add(value) {
              uncurriedNativeMethod(this, value === 0 ? 0 : value);
              return this;
            } : KEY == "delete" ? function(key) {
              return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
            } : KEY == "get" ? function get2(key) {
              return IS_WEAK && !isObject(key) ? void 0 : uncurriedNativeMethod(this, key === 0 ? 0 : key);
            } : KEY == "has" ? function has2(key) {
              return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
            } : function set2(key, value) {
              uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
              return this;
            }
          );
        };
        var REPLACE2 = isForced_1(
          CONSTRUCTOR_NAME,
          !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
            new NativeConstructor().entries().next();
          }))
        );
        if (REPLACE2) {
          Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          internalMetadata.enable();
        } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor();
          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
          var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
          });
          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
            new NativeConstructor(iterable);
          });
          var BUGGY_ZERO = !IS_WEAK && fails(function() {
            var $instance = new NativeConstructor();
            var index = 5;
            while (index--) $instance[ADDER](index, index);
            return !$instance.has(-0);
          });
          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper2(function(dummy, iterable) {
              anInstance(dummy, NativePrototype);
              var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
              if (iterable != void 0) iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
              return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod("delete");
            fixMethod("has");
            IS_MAP && fixMethod("get");
          }
          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
          if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
        }
        exported[CONSTRUCTOR_NAME] = Constructor;
        _export({ global: true, constructor: true, forced: Constructor != NativeConstructor }, exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
      var getWeakData = internalMetadata.getWeakData;
      var setInternalState$2 = internalState.set;
      var internalStateGetterFor = internalState.getterFor;
      var find = arrayIteration.find;
      var findIndex = arrayIteration.findIndex;
      var splice = functionUncurryThis([].splice);
      var id$1 = 0;
      var uncaughtFrozenStore = function(store2) {
        return store2.frozen || (store2.frozen = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function() {
        this.entries = [];
      };
      var findUncaughtFrozen = function(store2, key) {
        return find(store2.entries, function(it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;
          else this.entries.push([key, value]);
        },
        "delete": function(key) {
          var index = findIndex(this.entries, function(it) {
            return it[0] === key;
          });
          if (~index) splice(this.entries, index, 1);
          return !!~index;
        }
      };
      var collectionWeak = {
        getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var Constructor = wrapper2(function(that, iterable) {
            anInstance(that, Prototype);
            setInternalState$2(that, {
              type: CONSTRUCTOR_NAME,
              id: id$1++,
              frozen: void 0
            });
            if (iterable != void 0) iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
          });
          var Prototype = Constructor.prototype;
          var getInternalState2 = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define2 = function(that, key, value) {
            var state = getInternalState2(that);
            var data2 = getWeakData(anObject(key), true);
            if (data2 === true) uncaughtFrozenStore(state).set(key, value);
            else data2[state.id] = value;
            return that;
          };
          defineBuiltIns(Prototype, {
            // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
            // https://tc39.es/ecma262/#sec-weakset.prototype.delete
            "delete": function(key) {
              var state = getInternalState2(this);
              if (!isObject(key)) return false;
              var data2 = getWeakData(key);
              if (data2 === true) return uncaughtFrozenStore(state)["delete"](key);
              return data2 && hasOwnProperty_1(data2, state.id) && delete data2[state.id];
            },
            // `{ WeakMap, WeakSet }.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.has
            // https://tc39.es/ecma262/#sec-weakset.prototype.has
            has: function has2(key) {
              var state = getInternalState2(this);
              if (!isObject(key)) return false;
              var data2 = getWeakData(key);
              if (data2 === true) return uncaughtFrozenStore(state).has(key);
              return data2 && hasOwnProperty_1(data2, state.id);
            }
          });
          defineBuiltIns(Prototype, IS_MAP ? {
            // `WeakMap.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.get
            get: function get2(key) {
              var state = getInternalState2(this);
              if (isObject(key)) {
                var data2 = getWeakData(key);
                if (data2 === true) return uncaughtFrozenStore(state).get(key);
                return data2 ? data2[state.id] : void 0;
              }
            },
            // `WeakMap.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.set
            set: function set2(key, value) {
              return define2(this, key, value);
            }
          } : {
            // `WeakSet.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-weakset.prototype.add
            add: function add(value) {
              return define2(this, value, true);
            }
          });
          return Constructor;
        }
      };
      var enforceInternalState = internalState.enforce;
      var IS_IE11 = !global_1.ActiveXObject && "ActiveXObject" in global_1;
      var InternalWeakMap;
      var wrapper = function(init) {
        return function WeakMap2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      };
      var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
      if (nativeWeakMap && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
        internalMetadata.enable();
        var WeakMapPrototype = $WeakMap.prototype;
        var nativeDelete = functionUncurryThis(WeakMapPrototype["delete"]);
        var nativeHas = functionUncurryThis(WeakMapPrototype.has);
        var nativeGet = functionUncurryThis(WeakMapPrototype.get);
        var nativeSet = functionUncurryThis(WeakMapPrototype.set);
        defineBuiltIns(WeakMapPrototype, {
          "delete": function(key) {
            if (isObject(key) && !objectIsExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeDelete(this, key) || state.frozen["delete"](key);
            }
            return nativeDelete(this, key);
          },
          has: function has2(key) {
            if (isObject(key) && !objectIsExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas(this, key) || state.frozen.has(key);
            }
            return nativeHas(this, key);
          },
          get: function get2(key) {
            if (isObject(key) && !objectIsExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
            }
            return nativeGet(this, key);
          },
          set: function set2(key, value) {
            if (isObject(key) && !objectIsExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
            } else nativeSet(this, key, value);
            return this;
          }
        });
      }
      var ITERATOR$6 = wellKnownSymbol("iterator");
      var TO_STRING_TAG$3 = wellKnownSymbol("toStringTag");
      var ArrayValues = es_array_iterator.values;
      var handlePrototype$1 = function(CollectionPrototype, COLLECTION_NAME2) {
        if (CollectionPrototype) {
          if (CollectionPrototype[ITERATOR$6] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR$6, ArrayValues);
          } catch (error) {
            CollectionPrototype[ITERATOR$6] = ArrayValues;
          }
          if (!CollectionPrototype[TO_STRING_TAG$3]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME2);
          }
          if (domIterables[COLLECTION_NAME2]) for (var METHOD_NAME in es_array_iterator) {
            if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
            } catch (error) {
              CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
            }
          }
        }
      };
      for (var COLLECTION_NAME$1 in domIterables) {
        handlePrototype$1(global_1[COLLECTION_NAME$1] && global_1[COLLECTION_NAME$1].prototype, COLLECTION_NAME$1);
      }
      handlePrototype$1(domTokenListPrototype, "DOMTokenList");
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString$1 = objectProto.toString;
      var nativeMax = Math.max, nativeMin = Math.min;
      var now = function() {
        return root.Date.now();
      };
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject$1(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time2 = now(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject$1(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function isObject$1(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol$1(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString$1.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol$1(value)) {
          return NAN;
        }
        if (isObject$1(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject$1(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      var lodash_throttle = throttle;
      var FUNC_ERROR_TEXT$1 = "Expected a function";
      var NAN$1 = 0 / 0;
      var symbolTag$1 = "[object Symbol]";
      var reTrim$1 = /^\s+|\s+$/g;
      var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary$1 = /^0b[01]+$/i;
      var reIsOctal$1 = /^0o[0-7]+$/i;
      var freeParseInt$1 = parseInt;
      var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
      var root$1 = freeGlobal$1 || freeSelf$1 || Function("return this")();
      var objectProto$1 = Object.prototype;
      var objectToString$2 = objectProto$1.toString;
      var nativeMax$1 = Math.max, nativeMin$1 = Math.min;
      var now$1 = function() {
        return root$1.Date.now();
      };
      function debounce$1(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$1);
        }
        wait = toNumber$1(wait) || 0;
        if (isObject$2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin$1(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now$1();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now$1());
        }
        function debounced() {
          var time2 = now$1(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function isObject$2(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike$1(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol$2(value) {
        return typeof value == "symbol" || isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1;
      }
      function toNumber$1(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol$2(value)) {
          return NAN$1;
        }
        if (isObject$2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject$2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim$1, "");
        var isBinary = reIsBinary$1.test(value);
        return isBinary || reIsOctal$1.test(value) ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8) : reIsBadHex$1.test(value) ? NAN$1 : +value;
      }
      var lodash_debounce = debounce$1;
      var FUNC_ERROR_TEXT$2 = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var funcTag = "[object Function]", genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal$2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf$2 = typeof self == "object" && self && self.Object === Object && self;
      var root$2 = freeGlobal$2 || freeSelf$2 || Function("return this")();
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto$2 = Object.prototype;
      var coreJsData = root$2["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
      var objectToString$3 = objectProto$2.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty$1).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var splice$1 = arrayProto.splice;
      var Map = getNative(root$2, "Map"), nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data2 = this.__data__;
        if (nativeCreate) {
          var result = data2[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty$1.call(data2, key) ? data2[key] : void 0;
      }
      function hashHas(key) {
        var data2 = this.__data__;
        return nativeCreate ? data2[key] !== void 0 : hasOwnProperty$1.call(data2, key);
      }
      function hashSet(key, value) {
        var data2 = this.__data__;
        data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data2.length - 1;
        if (index == lastIndex) {
          data2.pop();
        } else {
          splice$1.call(data2, index, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        return index < 0 ? void 0 : data2[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data2 = this.__data__, index = assocIndexOf(data2, key);
        if (index < 0) {
          data2.push([key, value]);
        } else {
          data2[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseIsNative(value) {
        if (!isObject$3(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function getMapData(map, key) {
        var data2 = map.__data__;
        return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$2);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
          if (cache2.has(key)) {
            return cache2.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache2.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isFunction(value) {
        var tag = isObject$3(value) ? objectToString$3.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject$3(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      var lodash_memoize = memoize;
      var resizeObservers = [];
      var hasActiveObservations = function() {
        return resizeObservers.some(function(ro) {
          return ro.activeTargets.length > 0;
        });
      };
      var hasSkippedObservations = function() {
        return resizeObservers.some(function(ro) {
          return ro.skippedTargets.length > 0;
        });
      };
      var msg = "ResizeObserver loop completed with undelivered notifications.";
      var deliverResizeLoopError = function() {
        var event;
        if (typeof ErrorEvent === "function") {
          event = new ErrorEvent("error", {
            message: msg
          });
        } else {
          event = document.createEvent("Event");
          event.initEvent("error", false, false);
          event.message = msg;
        }
        window.dispatchEvent(event);
      };
      var ResizeObserverBoxOptions;
      (function(ResizeObserverBoxOptions2) {
        ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
        ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
        ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
      })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
      var freeze = function(obj) {
        return Object.freeze(obj);
      };
      var ResizeObserverSize = /* @__PURE__ */ function() {
        function ResizeObserverSize2(inlineSize, blockSize) {
          this.inlineSize = inlineSize;
          this.blockSize = blockSize;
          freeze(this);
        }
        return ResizeObserverSize2;
      }();
      var DOMRectReadOnly = function() {
        function DOMRectReadOnly2(x, y, width, height) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
          this.top = this.y;
          this.left = this.x;
          this.bottom = this.top + this.height;
          this.right = this.left + this.width;
          return freeze(this);
        }
        DOMRectReadOnly2.prototype.toJSON = function() {
          var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
          return { x, y, top, right, bottom, left, width, height };
        };
        DOMRectReadOnly2.fromRect = function(rectangle) {
          return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
        };
        return DOMRectReadOnly2;
      }();
      var isSVG = function(target) {
        return target instanceof SVGElement && "getBBox" in target;
      };
      var isHidden = function(target) {
        if (isSVG(target)) {
          var _a = target.getBBox(), width = _a.width, height = _a.height;
          return !width && !height;
        }
        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
        return !(offsetWidth || offsetHeight || target.getClientRects().length);
      };
      var isElement = function(obj) {
        var _a, _b;
        if (obj instanceof Element) {
          return true;
        }
        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
        return !!(scope && obj instanceof scope.Element);
      };
      var isReplacedElement = function(target) {
        switch (target.tagName) {
          case "INPUT":
            if (target.type !== "image") {
              break;
            }
          case "VIDEO":
          case "AUDIO":
          case "EMBED":
          case "OBJECT":
          case "CANVAS":
          case "IFRAME":
          case "IMG":
            return true;
        }
        return false;
      };
      var global$1 = typeof window !== "undefined" ? window : {};
      var cache = /* @__PURE__ */ new WeakMap();
      var scrollRegexp = /auto|scroll/;
      var verticalRegexp = /^tb|vertical/;
      var IE = /msie|trident/i.test(global$1.navigator && global$1.navigator.userAgent);
      var parseDimension = function(pixel) {
        return parseFloat(pixel || "0");
      };
      var size = function(inlineSize, blockSize, switchSizes) {
        if (inlineSize === void 0) {
          inlineSize = 0;
        }
        if (blockSize === void 0) {
          blockSize = 0;
        }
        if (switchSizes === void 0) {
          switchSizes = false;
        }
        return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
      };
      var zeroBoxes = freeze({
        devicePixelContentBoxSize: size(),
        borderBoxSize: size(),
        contentBoxSize: size(),
        contentRect: new DOMRectReadOnly(0, 0, 0, 0)
      });
      var calculateBoxSizes = function(target, forceRecalculation) {
        if (forceRecalculation === void 0) {
          forceRecalculation = false;
        }
        if (cache.has(target) && !forceRecalculation) {
          return cache.get(target);
        }
        if (isHidden(target)) {
          cache.set(target, zeroBoxes);
          return zeroBoxes;
        }
        var cs = getComputedStyle(target);
        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
        var removePadding = !IE && cs.boxSizing === "border-box";
        var switchSizes = verticalRegexp.test(cs.writingMode || "");
        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
        var horizontalPadding = paddingLeft + paddingRight;
        var verticalPadding = paddingTop + paddingBottom;
        var horizontalBorderArea = borderLeft + borderRight;
        var verticalBorderArea = borderTop + borderBottom;
        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
        var boxes = freeze({
          devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
          borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
          contentBoxSize: size(contentWidth, contentHeight, switchSizes),
          contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
        });
        cache.set(target, boxes);
        return boxes;
      };
      var calculateBoxSize = function(target, observedBox, forceRecalculation) {
        var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
        switch (observedBox) {
          case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
            return devicePixelContentBoxSize;
          case ResizeObserverBoxOptions.BORDER_BOX:
            return borderBoxSize;
          default:
            return contentBoxSize;
        }
      };
      var ResizeObserverEntry = /* @__PURE__ */ function() {
        function ResizeObserverEntry2(target) {
          var boxes = calculateBoxSizes(target);
          this.target = target;
          this.contentRect = boxes.contentRect;
          this.borderBoxSize = freeze([boxes.borderBoxSize]);
          this.contentBoxSize = freeze([boxes.contentBoxSize]);
          this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
        }
        return ResizeObserverEntry2;
      }();
      var calculateDepthForNode = function(node) {
        if (isHidden(node)) {
          return Infinity;
        }
        var depth = 0;
        var parent = node.parentNode;
        while (parent) {
          depth += 1;
          parent = parent.parentNode;
        }
        return depth;
      };
      var broadcastActiveObservations = function() {
        var shallowestDepth = Infinity;
        var callbacks2 = [];
        resizeObservers.forEach(function processObserver(ro) {
          if (ro.activeTargets.length === 0) {
            return;
          }
          var entries = [];
          ro.activeTargets.forEach(function processTarget(ot) {
            var entry = new ResizeObserverEntry(ot.target);
            var targetDepth = calculateDepthForNode(ot.target);
            entries.push(entry);
            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
            if (targetDepth < shallowestDepth) {
              shallowestDepth = targetDepth;
            }
          });
          callbacks2.push(function resizeObserverCallback() {
            ro.callback.call(ro.observer, entries, ro.observer);
          });
          ro.activeTargets.splice(0, ro.activeTargets.length);
        });
        for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
          var callback = callbacks_1[_i];
          callback();
        }
        return shallowestDepth;
      };
      var gatherActiveObservationsAtDepth = function(depth) {
        resizeObservers.forEach(function processObserver(ro) {
          ro.activeTargets.splice(0, ro.activeTargets.length);
          ro.skippedTargets.splice(0, ro.skippedTargets.length);
          ro.observationTargets.forEach(function processTarget(ot) {
            if (ot.isActive()) {
              if (calculateDepthForNode(ot.target) > depth) {
                ro.activeTargets.push(ot);
              } else {
                ro.skippedTargets.push(ot);
              }
            }
          });
        });
      };
      var process$1 = function() {
        var depth = 0;
        gatherActiveObservationsAtDepth(depth);
        while (hasActiveObservations()) {
          depth = broadcastActiveObservations();
          gatherActiveObservationsAtDepth(depth);
        }
        if (hasSkippedObservations()) {
          deliverResizeLoopError();
        }
        return depth > 0;
      };
      var trigger;
      var callbacks = [];
      var notify = function() {
        return callbacks.splice(0).forEach(function(cb) {
          return cb();
        });
      };
      var queueMicroTask = function(callback) {
        if (!trigger) {
          var toggle_1 = 0;
          var el_1 = document.createTextNode("");
          var config = { characterData: true };
          new MutationObserver(function() {
            return notify();
          }).observe(el_1, config);
          trigger = function() {
            el_1.textContent = "" + (toggle_1 ? toggle_1-- : toggle_1++);
          };
        }
        callbacks.push(callback);
        trigger();
      };
      var queueResizeObserver = function(cb) {
        queueMicroTask(function ResizeObserver2() {
          requestAnimationFrame(cb);
        });
      };
      var watching = 0;
      var isWatching = function() {
        return !!watching;
      };
      var CATCH_PERIOD = 250;
      var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
      var events = [
        "resize",
        "load",
        "transitionend",
        "animationend",
        "animationstart",
        "animationiteration",
        "keyup",
        "keydown",
        "mouseup",
        "mousedown",
        "mouseover",
        "mouseout",
        "blur",
        "focus"
      ];
      var time = function(timeout) {
        if (timeout === void 0) {
          timeout = 0;
        }
        return Date.now() + timeout;
      };
      var scheduled = false;
      var Scheduler = function() {
        function Scheduler2() {
          var _this = this;
          this.stopped = true;
          this.listener = function() {
            return _this.schedule();
          };
        }
        Scheduler2.prototype.run = function(timeout) {
          var _this = this;
          if (timeout === void 0) {
            timeout = CATCH_PERIOD;
          }
          if (scheduled) {
            return;
          }
          scheduled = true;
          var until = time(timeout);
          queueResizeObserver(function() {
            var elementsHaveResized = false;
            try {
              elementsHaveResized = process$1();
            } finally {
              scheduled = false;
              timeout = until - time();
              if (!isWatching()) {
                return;
              }
              if (elementsHaveResized) {
                _this.run(1e3);
              } else if (timeout > 0) {
                _this.run(timeout);
              } else {
                _this.start();
              }
            }
          });
        };
        Scheduler2.prototype.schedule = function() {
          this.stop();
          this.run();
        };
        Scheduler2.prototype.observe = function() {
          var _this = this;
          var cb = function() {
            return _this.observer && _this.observer.observe(document.body, observerConfig);
          };
          document.body ? cb() : global$1.addEventListener("DOMContentLoaded", cb);
        };
        Scheduler2.prototype.start = function() {
          var _this = this;
          if (this.stopped) {
            this.stopped = false;
            this.observer = new MutationObserver(this.listener);
            this.observe();
            events.forEach(function(name) {
              return global$1.addEventListener(name, _this.listener, true);
            });
          }
        };
        Scheduler2.prototype.stop = function() {
          var _this = this;
          if (!this.stopped) {
            this.observer && this.observer.disconnect();
            events.forEach(function(name) {
              return global$1.removeEventListener(name, _this.listener, true);
            });
            this.stopped = true;
          }
        };
        return Scheduler2;
      }();
      var scheduler = new Scheduler();
      var updateCount = function(n) {
        !watching && n > 0 && scheduler.start();
        watching += n;
        !watching && scheduler.stop();
      };
      var skipNotifyOnElement = function(target) {
        return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
      };
      var ResizeObservation = function() {
        function ResizeObservation2(target, observedBox) {
          this.target = target;
          this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
          this.lastReportedSize = {
            inlineSize: 0,
            blockSize: 0
          };
        }
        ResizeObservation2.prototype.isActive = function() {
          var size2 = calculateBoxSize(this.target, this.observedBox, true);
          if (skipNotifyOnElement(this.target)) {
            this.lastReportedSize = size2;
          }
          if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
            return true;
          }
          return false;
        };
        return ResizeObservation2;
      }();
      var ResizeObserverDetail = /* @__PURE__ */ function() {
        function ResizeObserverDetail2(resizeObserver, callback) {
          this.activeTargets = [];
          this.skippedTargets = [];
          this.observationTargets = [];
          this.observer = resizeObserver;
          this.callback = callback;
        }
        return ResizeObserverDetail2;
      }();
      var observerMap = /* @__PURE__ */ new WeakMap();
      var getObservationIndex = function(observationTargets, target) {
        for (var i = 0; i < observationTargets.length; i += 1) {
          if (observationTargets[i].target === target) {
            return i;
          }
        }
        return -1;
      };
      var ResizeObserverController = function() {
        function ResizeObserverController2() {
        }
        ResizeObserverController2.connect = function(resizeObserver, callback) {
          var detail = new ResizeObserverDetail(resizeObserver, callback);
          observerMap.set(resizeObserver, detail);
        };
        ResizeObserverController2.observe = function(resizeObserver, target, options) {
          var detail = observerMap.get(resizeObserver);
          var firstObservation = detail.observationTargets.length === 0;
          if (getObservationIndex(detail.observationTargets, target) < 0) {
            firstObservation && resizeObservers.push(detail);
            detail.observationTargets.push(new ResizeObservation(target, options && options.box));
            updateCount(1);
            scheduler.schedule();
          }
        };
        ResizeObserverController2.unobserve = function(resizeObserver, target) {
          var detail = observerMap.get(resizeObserver);
          var index = getObservationIndex(detail.observationTargets, target);
          var lastObservation = detail.observationTargets.length === 1;
          if (index >= 0) {
            lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
            detail.observationTargets.splice(index, 1);
            updateCount(-1);
          }
        };
        ResizeObserverController2.disconnect = function(resizeObserver) {
          var _this = this;
          var detail = observerMap.get(resizeObserver);
          detail.observationTargets.slice().forEach(function(ot) {
            return _this.unobserve(resizeObserver, ot.target);
          });
          detail.activeTargets.splice(0, detail.activeTargets.length);
        };
        return ResizeObserverController2;
      }();
      var ResizeObserver = function() {
        function ResizeObserver2(callback) {
          if (arguments.length === 0) {
            throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
          }
          if (typeof callback !== "function") {
            throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
          }
          ResizeObserverController.connect(this, callback);
        }
        ResizeObserver2.prototype.observe = function(target, options) {
          if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
          }
          if (!isElement(target)) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
          }
          ResizeObserverController.observe(this, target, options);
        };
        ResizeObserver2.prototype.unobserve = function(target) {
          if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
          }
          if (!isElement(target)) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
          }
          ResizeObserverController.unobserve(this, target);
        };
        ResizeObserver2.prototype.disconnect = function() {
          ResizeObserverController.disconnect(this);
        };
        ResizeObserver2.toString = function() {
          return "function ResizeObserver () { [polyfill code] }";
        };
        return ResizeObserver2;
      }();
      var TypeError$c = global_1.TypeError;
      var createMethod$4 = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
          aCallable(callbackfn);
          var O = toObject(that);
          var self2 = indexedObject(O);
          var length = lengthOfArrayLike(O);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2) while (true) {
            if (index in self2) {
              memo = self2[index];
              index += i;
              break;
            }
            index += i;
            if (IS_RIGHT ? index < 0 : length <= index) {
              throw TypeError$c("Reduce of empty array with no initial value");
            }
          }
          for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self2) {
            memo = callbackfn(memo, self2[index], index, O);
          }
          return memo;
        };
      };
      var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod$4(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod$4(true)
      };
      var engineIsNode = classofRaw(global_1.process) == "process";
      var $reduce = arrayReduce.left;
      var STRICT_METHOD$1 = arrayMethodIsStrict("reduce");
      var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83;
      _export({ target: "Array", proto: true, forced: !STRICT_METHOD$1 || CHROME_BUG }, {
        reduce: function reduce(callbackfn) {
          var length = arguments.length;
          return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
        }
      });
      var regexpFlags = function() {
        var that = anObject(this);
        var result = "";
        if (that.hasIndices) result += "d";
        if (that.global) result += "g";
        if (that.ignoreCase) result += "i";
        if (that.multiline) result += "m";
        if (that.dotAll) result += "s";
        if (that.unicode) result += "u";
        if (that.sticky) result += "y";
        return result;
      };
      var $RegExp = global_1.RegExp;
      var UNSUPPORTED_Y = fails(function() {
        var re = $RegExp("a", "y");
        re.lastIndex = 2;
        return re.exec("abcd") != null;
      });
      var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
        return !$RegExp("a", "y").sticky;
      });
      var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
        var re = $RegExp("^r", "gy");
        re.lastIndex = 2;
        return re.exec("str") != null;
      });
      var regexpStickyHelpers = {
        BROKEN_CARET,
        MISSED_STICKY,
        UNSUPPORTED_Y
      };
      var $RegExp$1 = global_1.RegExp;
      var regexpUnsupportedDotAll = fails(function() {
        var re = $RegExp$1(".", "s");
        return !(re.dotAll && re.exec("\n") && re.flags === "s");
      });
      var $RegExp$2 = global_1.RegExp;
      var regexpUnsupportedNcg = fails(function() {
        var re = $RegExp$2("(?<a>b)", "g");
        return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
      });
      var getInternalState$2 = internalState.get;
      var nativeReplace = shared("native-string-replace", String.prototype.replace);
      var nativeExec = RegExp.prototype.exec;
      var patchedExec = nativeExec;
      var charAt$2 = functionUncurryThis("".charAt);
      var indexOf$1 = functionUncurryThis("".indexOf);
      var replace$1 = functionUncurryThis("".replace);
      var stringSlice$2 = functionUncurryThis("".slice);
      var UPDATES_LAST_INDEX_WRONG = function() {
        var re1 = /a/;
        var re2 = /b*/g;
        functionCall(nativeExec, re1, "a");
        functionCall(nativeExec, re2, "a");
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();
      var UNSUPPORTED_Y$1 = regexpStickyHelpers.BROKEN_CARET;
      var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || regexpUnsupportedDotAll || regexpUnsupportedNcg;
      if (PATCH) {
        patchedExec = function exec2(string) {
          var re = this;
          var state = getInternalState$2(re);
          var str = toString_1(string);
          var raw = state.raw;
          var result, reCopy, lastIndex, match2, i, object, group;
          if (raw) {
            raw.lastIndex = re.lastIndex;
            result = functionCall(patchedExec, raw, str);
            re.lastIndex = raw.lastIndex;
            return result;
          }
          var groups = state.groups;
          var sticky = UNSUPPORTED_Y$1 && re.sticky;
          var flags = functionCall(regexpFlags, re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;
          if (sticky) {
            flags = replace$1(flags, "y", "");
            if (indexOf$1(flags, "g") === -1) {
              flags += "g";
            }
            strCopy = stringSlice$2(str, re.lastIndex);
            if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== "\n")) {
              source = "(?: " + source + ")";
              strCopy = " " + strCopy;
              charsAdded++;
            }
            reCopy = new RegExp("^(?:" + source + ")", flags);
          }
          if (NPCG_INCLUDED) {
            reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
          }
          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match2 = functionCall(nativeExec, sticky ? reCopy : re, strCopy);
          if (sticky) {
            if (match2) {
              match2.input = stringSlice$2(match2.input, charsAdded);
              match2[0] = stringSlice$2(match2[0], charsAdded);
              match2.index = re.lastIndex;
              re.lastIndex += match2[0].length;
            } else re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match2) {
            re.lastIndex = re.global ? match2.index + match2[0].length : lastIndex;
          }
          if (NPCG_INCLUDED && match2 && match2.length > 1) {
            functionCall(nativeReplace, match2[0], reCopy, function() {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0) match2[i] = void 0;
              }
            });
          }
          if (match2 && groups) {
            match2.groups = object = objectCreate(null);
            for (i = 0; i < groups.length; i++) {
              group = groups[i];
              object[group[0]] = match2[group[1]];
            }
          }
          return match2;
        };
      }
      var regexpExec = patchedExec;
      _export({ target: "RegExp", proto: true, forced: /./.exec !== regexpExec }, {
        exec: regexpExec
      });
      var SPECIES$2 = wellKnownSymbol("species");
      var RegExpPrototype = RegExp.prototype;
      var fixRegexpWellKnownSymbolLogic = function(KEY, exec2, FORCED2, SHAM) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function() {
          var O = {};
          O[SYMBOL] = function() {
            return 7;
          };
          return ""[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
          var execCalled = false;
          var re = /a/;
          if (KEY === "split") {
            re = {};
            re.constructor = {};
            re.constructor[SPECIES$2] = function() {
              return re;
            };
            re.flags = "";
            re[SYMBOL] = /./[SYMBOL];
          }
          re.exec = function() {
            execCalled = true;
            return null;
          };
          re[SYMBOL]("");
          return !execCalled;
        });
        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED2) {
          var uncurriedNativeRegExpMethod = functionUncurryThis(/./[SYMBOL]);
          var methods = exec2(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            var uncurriedNativeMethod = functionUncurryThis(nativeMethod);
            var $exec = regexp.exec;
            if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
              }
              return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
            }
            return { done: false };
          });
          defineBuiltIn(String.prototype, KEY, methods[0]);
          defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
        }
        if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
      };
      var charAt$3 = stringMultibyte.charAt;
      var advanceStringIndex = function(S, index, unicode) {
        return index + (unicode ? charAt$3(S, index).length : 1);
      };
      var TypeError$d = global_1.TypeError;
      var regexpExecAbstract = function(R, S) {
        var exec2 = R.exec;
        if (isCallable(exec2)) {
          var result = functionCall(exec2, R, S);
          if (result !== null) anObject(result);
          return result;
        }
        if (classofRaw(R) === "RegExp") return functionCall(regexpExec, R, S);
        throw TypeError$d("RegExp#exec called on incompatible receiver");
      };
      fixRegexpWellKnownSymbolLogic("match", function(MATCH, nativeMatch, maybeCallNative) {
        return [
          // `String.prototype.match` method
          // https://tc39.es/ecma262/#sec-string.prototype.match
          function match2(regexp) {
            var O = requireObjectCoercible(this);
            var matcher = regexp == void 0 ? void 0 : getMethod(regexp, MATCH);
            return matcher ? functionCall(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString_1(O));
          },
          // `RegExp.prototype[@@match]` method
          // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
          function(string) {
            var rx = anObject(this);
            var S = toString_1(string);
            var res = maybeCallNative(nativeMatch, rx, S);
            if (res.done) return res.value;
            if (!rx.global) return regexpExecAbstract(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while ((result = regexpExecAbstract(rx, S)) !== null) {
              var matchStr = toString_1(result[0]);
              A[n] = matchStr;
              if (matchStr === "") rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              n++;
            }
            return n === 0 ? null : A;
          }
        ];
      });
      var FUNCTION_NAME_EXISTS = functionName.EXISTS;
      var defineProperty$5 = objectDefineProperty.f;
      var FunctionPrototype$2 = Function.prototype;
      var functionToString$1 = functionUncurryThis(FunctionPrototype$2.toString);
      var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
      var regExpExec = functionUncurryThis(nameRE.exec);
      var NAME = "name";
      if (descriptors && !FUNCTION_NAME_EXISTS) {
        defineProperty$5(FunctionPrototype$2, NAME, {
          configurable: true,
          get: function() {
            try {
              return regExpExec(nameRE, functionToString$1(this))[1];
            } catch (error) {
              return "";
            }
          }
        });
      }
      var FunctionPrototype$3 = Function.prototype;
      var apply = FunctionPrototype$3.apply;
      var call$2 = FunctionPrototype$3.call;
      var functionApply = typeof Reflect == "object" && Reflect.apply || (functionBindNative ? call$2.bind(apply) : function() {
        return call$2.apply(apply, arguments);
      });
      var floor$1 = Math.floor;
      var charAt$4 = functionUncurryThis("".charAt);
      var replace$2 = functionUncurryThis("".replace);
      var stringSlice$3 = functionUncurryThis("".slice);
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
      var getSubstitution = function(matched, str, position, captures, namedCaptures, replacement2) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== void 0) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return replace$2(replacement2, symbols, function(match2, ch) {
          var capture;
          switch (charAt$4(ch, 0)) {
            case "$":
              return "$";
            case "&":
              return matched;
            case "`":
              return stringSlice$3(str, 0, position);
            case "'":
              return stringSlice$3(str, tailPos);
            case "<":
              capture = namedCaptures[stringSlice$3(ch, 1, -1)];
              break;
            default:
              var n = +ch;
              if (n === 0) return match2;
              if (n > m) {
                var f2 = floor$1(n / 10);
                if (f2 === 0) return match2;
                if (f2 <= m) return captures[f2 - 1] === void 0 ? charAt$4(ch, 1) : captures[f2 - 1] + charAt$4(ch, 1);
                return match2;
              }
              capture = captures[n - 1];
          }
          return capture === void 0 ? "" : capture;
        });
      };
      var REPLACE = wellKnownSymbol("replace");
      var max$2 = Math.max;
      var min$2 = Math.min;
      var concat$2 = functionUncurryThis([].concat);
      var push$2 = functionUncurryThis([].push);
      var stringIndexOf = functionUncurryThis("".indexOf);
      var stringSlice$4 = functionUncurryThis("".slice);
      var maybeToString = function(it) {
        return it === void 0 ? it : String(it);
      };
      var REPLACE_KEEPS_$0 = function() {
        return "a".replace(/./, "$0") === "$0";
      }();
      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
        if (/./[REPLACE]) {
          return /./[REPLACE]("a", "$0") === "";
        }
        return false;
      }();
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
        var re = /./;
        re.exec = function() {
          var result = [];
          result.groups = { a: "7" };
          return result;
        };
        return "".replace(re, "$<a>") !== "7";
      });
      fixRegexpWellKnownSymbolLogic("replace", function(_, nativeReplace2, maybeCallNative) {
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
        return [
          // `String.prototype.replace` method
          // https://tc39.es/ecma262/#sec-string.prototype.replace
          function replace2(searchValue, replaceValue) {
            var O = requireObjectCoercible(this);
            var replacer = searchValue == void 0 ? void 0 : getMethod(searchValue, REPLACE);
            return replacer ? functionCall(replacer, searchValue, O, replaceValue) : functionCall(nativeReplace2, toString_1(O), searchValue, replaceValue);
          },
          // `RegExp.prototype[@@replace]` method
          // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
          function(string, replaceValue) {
            var rx = anObject(this);
            var S = toString_1(string);
            if (typeof replaceValue == "string" && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, "$<") === -1) {
              var res = maybeCallNative(nativeReplace2, rx, S, replaceValue);
              if (res.done) return res.value;
            }
            var functionalReplace = isCallable(replaceValue);
            if (!functionalReplace) replaceValue = toString_1(replaceValue);
            var global2 = rx.global;
            if (global2) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }
            var results = [];
            while (true) {
              var result = regexpExecAbstract(rx, S);
              if (result === null) break;
              push$2(results, result);
              if (!global2) break;
              var matchStr = toString_1(result[0]);
              if (matchStr === "") rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = "";
            var nextSourcePosition = 0;
            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = toString_1(result[0]);
              var position = max$2(min$2(toIntegerOrInfinity(result.index), S.length), 0);
              var captures = [];
              for (var j = 1; j < result.length; j++) push$2(captures, maybeToString(result[j]));
              var namedCaptures = result.groups;
              if (functionalReplace) {
                var replacerArgs = concat$2([matched], captures, position, S);
                if (namedCaptures !== void 0) push$2(replacerArgs, namedCaptures);
                var replacement2 = toString_1(functionApply(replaceValue, void 0, replacerArgs));
              } else {
                replacement2 = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
              }
              if (position >= nextSourcePosition) {
                accumulatedResult += stringSlice$4(S, nextSourcePosition, position) + replacement2;
                nextSourcePosition = position + matched.length;
              }
            }
            return accumulatedResult + stringSlice$4(S, nextSourcePosition);
          }
        ];
      }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
      var getOptions = function getOptions2(obj) {
        var options = Array.prototype.reduce.call(obj, function(acc, attribute) {
          var option = attribute.name.match(/data-simplebar-(.+)/);
          if (option) {
            var key = option[1].replace(/\W+(.)/g, function(x, chr) {
              return chr.toUpperCase();
            });
            switch (attribute.value) {
              case "true":
                acc[key] = true;
                break;
              case "false":
                acc[key] = false;
                break;
              case void 0:
                acc[key] = true;
                break;
              default:
                acc[key] = attribute.value;
            }
          }
          return acc;
        }, {});
        return options;
      };
      function getElementWindow(element) {
        if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {
          return window;
        }
        return element.ownerDocument.defaultView;
      }
      function getElementDocument(element) {
        if (!element || !element.ownerDocument) {
          return document;
        }
        return element.ownerDocument;
      }
      var cachedScrollbarWidth = null;
      var cachedDevicePixelRatio = null;
      if (canUseDom) {
        window.addEventListener("resize", function() {
          if (cachedDevicePixelRatio !== window.devicePixelRatio) {
            cachedDevicePixelRatio = window.devicePixelRatio;
            cachedScrollbarWidth = null;
          }
        });
      }
      function scrollbarWidth(el) {
        if (cachedScrollbarWidth === null) {
          var document2 = getElementDocument(el);
          if (typeof document2 === "undefined") {
            cachedScrollbarWidth = 0;
            return cachedScrollbarWidth;
          }
          var body = document2.body;
          var box = document2.createElement("div");
          box.classList.add("simplebar-hide-scrollbar");
          body.appendChild(box);
          var width = box.getBoundingClientRect().right;
          body.removeChild(box);
          cachedScrollbarWidth = width;
        }
        return cachedScrollbarWidth;
      }
      var SimpleBar = function() {
        function SimpleBar2(element, options) {
          var _this = this;
          this.onScroll = function() {
            var elWindow = getElementWindow(_this.el);
            if (!_this.scrollXTicking) {
              elWindow.requestAnimationFrame(_this.scrollX);
              _this.scrollXTicking = true;
            }
            if (!_this.scrollYTicking) {
              elWindow.requestAnimationFrame(_this.scrollY);
              _this.scrollYTicking = true;
            }
          };
          this.scrollX = function() {
            if (_this.axis.x.isOverflowing) {
              _this.showScrollbar("x");
              _this.positionScrollbar("x");
            }
            _this.scrollXTicking = false;
          };
          this.scrollY = function() {
            if (_this.axis.y.isOverflowing) {
              _this.showScrollbar("y");
              _this.positionScrollbar("y");
            }
            _this.scrollYTicking = false;
          };
          this.onMouseEnter = function() {
            _this.showScrollbar("x");
            _this.showScrollbar("y");
          };
          this.onMouseMove = function(e) {
            _this.mouseX = e.clientX;
            _this.mouseY = e.clientY;
            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
              _this.onMouseMoveForAxis("x");
            }
            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
              _this.onMouseMoveForAxis("y");
            }
          };
          this.onMouseLeave = function() {
            _this.onMouseMove.cancel();
            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
              _this.onMouseLeaveForAxis("x");
            }
            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
              _this.onMouseLeaveForAxis("y");
            }
            _this.mouseX = -1;
            _this.mouseY = -1;
          };
          this.onWindowResize = function() {
            _this.scrollbarWidth = _this.getScrollbarWidth();
            _this.hideNativeScrollbar();
          };
          this.hideScrollbars = function() {
            _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();
            _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();
            if (!_this.isWithinBounds(_this.axis.y.track.rect)) {
              _this.axis.y.scrollbar.el.classList.remove(_this.classNames.visible);
              _this.axis.y.isVisible = false;
            }
            if (!_this.isWithinBounds(_this.axis.x.track.rect)) {
              _this.axis.x.scrollbar.el.classList.remove(_this.classNames.visible);
              _this.axis.x.isVisible = false;
            }
          };
          this.onPointerEvent = function(e) {
            var isWithinTrackXBounds, isWithinTrackYBounds;
            _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();
            _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();
            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
              isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);
            }
            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
              isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);
            }
            if (isWithinTrackXBounds || isWithinTrackYBounds) {
              e.preventDefault();
              e.stopPropagation();
              if (e.type === "mousedown") {
                if (isWithinTrackXBounds) {
                  _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();
                  if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {
                    _this.onDragStart(e, "x");
                  } else {
                    _this.onTrackClick(e, "x");
                  }
                }
                if (isWithinTrackYBounds) {
                  _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();
                  if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {
                    _this.onDragStart(e, "y");
                  } else {
                    _this.onTrackClick(e, "y");
                  }
                }
              }
            }
          };
          this.drag = function(e) {
            var eventOffset;
            var track = _this.axis[_this.draggedAxis].track;
            var trackSize = track.rect[_this.axis[_this.draggedAxis].sizeAttr];
            var scrollbar = _this.axis[_this.draggedAxis].scrollbar;
            var contentSize = _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollSizeAttr];
            var hostSize = parseInt(_this.elStyles[_this.axis[_this.draggedAxis].sizeAttr], 10);
            e.preventDefault();
            e.stopPropagation();
            if (_this.draggedAxis === "y") {
              eventOffset = e.pageY;
            } else {
              eventOffset = e.pageX;
            }
            var dragPos = eventOffset - track.rect[_this.axis[_this.draggedAxis].offsetAttr] - _this.axis[_this.draggedAxis].dragOffset;
            var dragPerc = dragPos / (trackSize - scrollbar.size);
            var scrollPos = dragPerc * (contentSize - hostSize);
            if (_this.draggedAxis === "x") {
              scrollPos = _this.isRtl && SimpleBar2.getRtlHelpers().isRtlScrollbarInverted ? scrollPos - (trackSize + scrollbar.size) : scrollPos;
              scrollPos = _this.isRtl && SimpleBar2.getRtlHelpers().isRtlScrollingInverted ? -scrollPos : scrollPos;
            }
            _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;
          };
          this.onEndDrag = function(e) {
            var elDocument = getElementDocument(_this.el);
            var elWindow = getElementWindow(_this.el);
            e.preventDefault();
            e.stopPropagation();
            _this.el.classList.remove(_this.classNames.dragging);
            elDocument.removeEventListener("mousemove", _this.drag, true);
            elDocument.removeEventListener("mouseup", _this.onEndDrag, true);
            _this.removePreventClickId = elWindow.setTimeout(function() {
              elDocument.removeEventListener("click", _this.preventClick, true);
              elDocument.removeEventListener("dblclick", _this.preventClick, true);
              _this.removePreventClickId = null;
            });
          };
          this.preventClick = function(e) {
            e.preventDefault();
            e.stopPropagation();
          };
          this.el = element;
          this.minScrollbarWidth = 20;
          this.options = Object.assign({}, SimpleBar2.defaultOptions, options);
          this.classNames = Object.assign({}, SimpleBar2.defaultOptions.classNames, this.options.classNames);
          this.axis = {
            x: {
              scrollOffsetAttr: "scrollLeft",
              sizeAttr: "width",
              scrollSizeAttr: "scrollWidth",
              offsetSizeAttr: "offsetWidth",
              offsetAttr: "left",
              overflowAttr: "overflowX",
              dragOffset: 0,
              isOverflowing: true,
              isVisible: false,
              forceVisible: false,
              track: {},
              scrollbar: {}
            },
            y: {
              scrollOffsetAttr: "scrollTop",
              sizeAttr: "height",
              scrollSizeAttr: "scrollHeight",
              offsetSizeAttr: "offsetHeight",
              offsetAttr: "top",
              overflowAttr: "overflowY",
              dragOffset: 0,
              isOverflowing: true,
              isVisible: false,
              forceVisible: false,
              track: {},
              scrollbar: {}
            }
          };
          this.removePreventClickId = null;
          if (SimpleBar2.instances.has(this.el)) {
            return;
          }
          this.recalculate = lodash_throttle(this.recalculate.bind(this), 64);
          this.onMouseMove = lodash_throttle(this.onMouseMove.bind(this), 64);
          this.hideScrollbars = lodash_debounce(this.hideScrollbars.bind(this), this.options.timeout);
          this.onWindowResize = lodash_debounce(this.onWindowResize.bind(this), 64, {
            leading: true
          });
          SimpleBar2.getRtlHelpers = lodash_memoize(SimpleBar2.getRtlHelpers);
          this.init();
        }
        SimpleBar2.getRtlHelpers = function getRtlHelpers() {
          var dummyDiv = document.createElement("div");
          dummyDiv.innerHTML = '<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';
          var scrollbarDummyEl = dummyDiv.firstElementChild;
          document.body.appendChild(scrollbarDummyEl);
          var dummyContainerChild = scrollbarDummyEl.firstElementChild;
          scrollbarDummyEl.scrollLeft = 0;
          var dummyContainerOffset = SimpleBar2.getOffset(scrollbarDummyEl);
          var dummyContainerChildOffset = SimpleBar2.getOffset(dummyContainerChild);
          scrollbarDummyEl.scrollLeft = 999;
          var dummyContainerScrollOffsetAfterScroll = SimpleBar2.getOffset(dummyContainerChild);
          return {
            // determines if the scrolling is responding with negative values
            isRtlScrollingInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left && dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left !== 0,
            // determines if the origin scrollbar position is inverted or not (positioned on left or right)
            isRtlScrollbarInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left
          };
        };
        SimpleBar2.getOffset = function getOffset(el) {
          var rect = el.getBoundingClientRect();
          var elDocument = getElementDocument(el);
          var elWindow = getElementWindow(el);
          return {
            top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),
            left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)
          };
        };
        var _proto = SimpleBar2.prototype;
        _proto.init = function init() {
          SimpleBar2.instances.set(this.el, this);
          if (canUseDom) {
            this.initDOM();
            this.setAccessibilityAttributes();
            this.scrollbarWidth = this.getScrollbarWidth();
            this.recalculate();
            this.initListeners();
          }
        };
        _proto.initDOM = function initDOM() {
          var _this2 = this;
          if (Array.prototype.filter.call(this.el.children, function(child) {
            return child.classList.contains(_this2.classNames.wrapper);
          }).length) {
            this.wrapperEl = this.el.querySelector("." + this.classNames.wrapper);
            this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector("." + this.classNames.contentWrapper);
            this.contentEl = this.options.contentNode || this.el.querySelector("." + this.classNames.contentEl);
            this.offsetEl = this.el.querySelector("." + this.classNames.offset);
            this.maskEl = this.el.querySelector("." + this.classNames.mask);
            this.placeholderEl = this.findChild(this.wrapperEl, "." + this.classNames.placeholder);
            this.heightAutoObserverWrapperEl = this.el.querySelector("." + this.classNames.heightAutoObserverWrapperEl);
            this.heightAutoObserverEl = this.el.querySelector("." + this.classNames.heightAutoObserverEl);
            this.axis.x.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.horizontal);
            this.axis.y.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.vertical);
          } else {
            this.wrapperEl = document.createElement("div");
            this.contentWrapperEl = document.createElement("div");
            this.offsetEl = document.createElement("div");
            this.maskEl = document.createElement("div");
            this.contentEl = document.createElement("div");
            this.placeholderEl = document.createElement("div");
            this.heightAutoObserverWrapperEl = document.createElement("div");
            this.heightAutoObserverEl = document.createElement("div");
            this.wrapperEl.classList.add(this.classNames.wrapper);
            this.contentWrapperEl.classList.add(this.classNames.contentWrapper);
            this.offsetEl.classList.add(this.classNames.offset);
            this.maskEl.classList.add(this.classNames.mask);
            this.contentEl.classList.add(this.classNames.contentEl);
            this.placeholderEl.classList.add(this.classNames.placeholder);
            this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);
            this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);
            while (this.el.firstChild) {
              this.contentEl.appendChild(this.el.firstChild);
            }
            this.contentWrapperEl.appendChild(this.contentEl);
            this.offsetEl.appendChild(this.contentWrapperEl);
            this.maskEl.appendChild(this.offsetEl);
            this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);
            this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);
            this.wrapperEl.appendChild(this.maskEl);
            this.wrapperEl.appendChild(this.placeholderEl);
            this.el.appendChild(this.wrapperEl);
          }
          if (!this.axis.x.track.el || !this.axis.y.track.el) {
            var track = document.createElement("div");
            var scrollbar = document.createElement("div");
            track.classList.add(this.classNames.track);
            scrollbar.classList.add(this.classNames.scrollbar);
            track.appendChild(scrollbar);
            this.axis.x.track.el = track.cloneNode(true);
            this.axis.x.track.el.classList.add(this.classNames.horizontal);
            this.axis.y.track.el = track.cloneNode(true);
            this.axis.y.track.el.classList.add(this.classNames.vertical);
            this.el.appendChild(this.axis.x.track.el);
            this.el.appendChild(this.axis.y.track.el);
          }
          this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector("." + this.classNames.scrollbar);
          this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector("." + this.classNames.scrollbar);
          if (!this.options.autoHide) {
            this.axis.x.scrollbar.el.classList.add(this.classNames.visible);
            this.axis.y.scrollbar.el.classList.add(this.classNames.visible);
          }
          this.el.setAttribute("data-simplebar", "init");
        };
        _proto.setAccessibilityAttributes = function setAccessibilityAttributes() {
          var ariaLabel = this.options.ariaLabel || "scrollable content";
          this.contentWrapperEl.setAttribute("tabindex", "0");
          this.contentWrapperEl.setAttribute("role", "region");
          this.contentWrapperEl.setAttribute("aria-label", ariaLabel);
        };
        _proto.initListeners = function initListeners() {
          var _this3 = this;
          var elWindow = getElementWindow(this.el);
          if (this.options.autoHide) {
            this.el.addEventListener("mouseenter", this.onMouseEnter);
          }
          ["mousedown", "click", "dblclick"].forEach(function(e) {
            _this3.el.addEventListener(e, _this3.onPointerEvent, true);
          });
          ["touchstart", "touchend", "touchmove"].forEach(function(e) {
            _this3.el.addEventListener(e, _this3.onPointerEvent, {
              capture: true,
              passive: true
            });
          });
          this.el.addEventListener("mousemove", this.onMouseMove);
          this.el.addEventListener("mouseleave", this.onMouseLeave);
          this.contentWrapperEl.addEventListener("scroll", this.onScroll);
          elWindow.addEventListener("resize", this.onWindowResize);
          var resizeObserverStarted = false;
          var resizeAnimationFrameId = null;
          var resizeObserver = elWindow.ResizeObserver || ResizeObserver;
          this.resizeObserver = new resizeObserver(function() {
            if (!resizeObserverStarted || resizeAnimationFrameId !== null) return;
            resizeAnimationFrameId = elWindow.requestAnimationFrame(function() {
              _this3.recalculate();
              resizeAnimationFrameId = null;
            });
          });
          this.resizeObserver.observe(this.el);
          this.resizeObserver.observe(this.contentEl);
          elWindow.requestAnimationFrame(function() {
            resizeObserverStarted = true;
          });
          this.mutationObserver = new elWindow.MutationObserver(this.recalculate);
          this.mutationObserver.observe(this.contentEl, {
            childList: true,
            subtree: true,
            characterData: true
          });
        };
        _proto.recalculate = function recalculate() {
          var elWindow = getElementWindow(this.el);
          this.elStyles = elWindow.getComputedStyle(this.el);
          this.isRtl = this.elStyles.direction === "rtl";
          var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;
          var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;
          var contentElOffsetWidth = this.contentEl.offsetWidth;
          var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;
          var elOverflowX = this.elStyles.overflowX;
          var elOverflowY = this.elStyles.overflowY;
          this.contentEl.style.padding = this.elStyles.paddingTop + " " + this.elStyles.paddingRight + " " + this.elStyles.paddingBottom + " " + this.elStyles.paddingLeft;
          this.wrapperEl.style.margin = "-" + this.elStyles.paddingTop + " -" + this.elStyles.paddingRight + " -" + this.elStyles.paddingBottom + " -" + this.elStyles.paddingLeft;
          var contentElScrollHeight = this.contentEl.scrollHeight;
          var contentElScrollWidth = this.contentEl.scrollWidth;
          this.contentWrapperEl.style.height = isHeightAuto ? "auto" : "100%";
          this.placeholderEl.style.width = isWidthAuto ? contentElOffsetWidth + "px" : "auto";
          this.placeholderEl.style.height = contentElScrollHeight + "px";
          var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;
          this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;
          this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight;
          this.axis.x.isOverflowing = elOverflowX === "hidden" ? false : this.axis.x.isOverflowing;
          this.axis.y.isOverflowing = elOverflowY === "hidden" ? false : this.axis.y.isOverflowing;
          this.axis.x.forceVisible = this.options.forceVisible === "x" || this.options.forceVisible === true;
          this.axis.y.forceVisible = this.options.forceVisible === "y" || this.options.forceVisible === true;
          this.hideNativeScrollbar();
          var offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;
          var offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;
          this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;
          this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;
          this.axis.x.scrollbar.size = this.getScrollbarSize("x");
          this.axis.y.scrollbar.size = this.getScrollbarSize("y");
          this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + "px";
          this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + "px";
          this.positionScrollbar("x");
          this.positionScrollbar("y");
          this.toggleTrackVisibility("x");
          this.toggleTrackVisibility("y");
        };
        _proto.getScrollbarSize = function getScrollbarSize(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          if (!this.axis[axis].isOverflowing) {
            return 0;
          }
          var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];
          var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];
          var scrollbarSize;
          var scrollbarRatio = trackSize / contentSize;
          scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);
          if (this.options.scrollbarMaxSize) {
            scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);
          }
          return scrollbarSize;
        };
        _proto.positionScrollbar = function positionScrollbar(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          if (!this.axis[axis].isOverflowing) {
            return;
          }
          var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];
          var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];
          var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);
          var scrollbar = this.axis[axis].scrollbar;
          var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];
          scrollOffset = axis === "x" && this.isRtl && SimpleBar2.getRtlHelpers().isRtlScrollingInverted ? -scrollOffset : scrollOffset;
          var scrollPourcent = scrollOffset / (contentSize - hostSize);
          var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);
          handleOffset = axis === "x" && this.isRtl && SimpleBar2.getRtlHelpers().isRtlScrollbarInverted ? handleOffset + (trackSize - scrollbar.size) : handleOffset;
          scrollbar.el.style.transform = axis === "x" ? "translate3d(" + handleOffset + "px, 0, 0)" : "translate3d(0, " + handleOffset + "px, 0)";
        };
        _proto.toggleTrackVisibility = function toggleTrackVisibility(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          var track = this.axis[axis].track.el;
          var scrollbar = this.axis[axis].scrollbar.el;
          if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {
            track.style.visibility = "visible";
            this.contentWrapperEl.style[this.axis[axis].overflowAttr] = "scroll";
          } else {
            track.style.visibility = "hidden";
            this.contentWrapperEl.style[this.axis[axis].overflowAttr] = "hidden";
          }
          if (this.axis[axis].isOverflowing) {
            scrollbar.style.display = "block";
          } else {
            scrollbar.style.display = "none";
          }
        };
        _proto.hideNativeScrollbar = function hideNativeScrollbar() {
          this.offsetEl.style[this.isRtl ? "left" : "right"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? "-" + this.scrollbarWidth + "px" : 0;
          this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? "-" + this.scrollbarWidth + "px" : 0;
        };
        _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();
          this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();
          var isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);
          if (isWithinScrollbarBoundsX) {
            this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);
          } else {
            this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);
          }
          if (this.isWithinBounds(this.axis[axis].track.rect)) {
            this.showScrollbar(axis);
            this.axis[axis].track.el.classList.add(this.classNames.hover);
          } else {
            this.axis[axis].track.el.classList.remove(this.classNames.hover);
          }
        };
        _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          this.axis[axis].track.el.classList.remove(this.classNames.hover);
          this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);
        };
        _proto.showScrollbar = function showScrollbar(axis) {
          if (axis === void 0) {
            axis = "y";
          }
          var scrollbar = this.axis[axis].scrollbar.el;
          if (!this.axis[axis].isVisible) {
            scrollbar.classList.add(this.classNames.visible);
            this.axis[axis].isVisible = true;
          }
          if (this.options.autoHide) {
            this.hideScrollbars();
          }
        };
        _proto.onDragStart = function onDragStart(e, axis) {
          if (axis === void 0) {
            axis = "y";
          }
          var elDocument = getElementDocument(this.el);
          var elWindow = getElementWindow(this.el);
          var scrollbar = this.axis[axis].scrollbar;
          var eventOffset = axis === "y" ? e.pageY : e.pageX;
          this.axis[axis].dragOffset = eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];
          this.draggedAxis = axis;
          this.el.classList.add(this.classNames.dragging);
          elDocument.addEventListener("mousemove", this.drag, true);
          elDocument.addEventListener("mouseup", this.onEndDrag, true);
          if (this.removePreventClickId === null) {
            elDocument.addEventListener("click", this.preventClick, true);
            elDocument.addEventListener("dblclick", this.preventClick, true);
          } else {
            elWindow.clearTimeout(this.removePreventClickId);
            this.removePreventClickId = null;
          }
        };
        _proto.onTrackClick = function onTrackClick(e, axis) {
          var _this4 = this;
          if (axis === void 0) {
            axis = "y";
          }
          if (!this.options.clickOnTrack) return;
          var elWindow = getElementWindow(this.el);
          this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();
          var scrollbar = this.axis[axis].scrollbar;
          var scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];
          var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);
          var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];
          var t = axis === "y" ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;
          var dir = t < 0 ? -1 : 1;
          var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;
          var scrollTo = function scrollTo2() {
            if (dir === -1) {
              if (scrolled > scrollSize) {
                var _this4$contentWrapper;
                scrolled -= _this4.options.clickOnTrackSpeed;
                _this4.contentWrapperEl.scrollTo((_this4$contentWrapper = {}, _this4$contentWrapper[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper));
                elWindow.requestAnimationFrame(scrollTo2);
              }
            } else {
              if (scrolled < scrollSize) {
                var _this4$contentWrapper2;
                scrolled += _this4.options.clickOnTrackSpeed;
                _this4.contentWrapperEl.scrollTo((_this4$contentWrapper2 = {}, _this4$contentWrapper2[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper2));
                elWindow.requestAnimationFrame(scrollTo2);
              }
            }
          };
          scrollTo();
        };
        _proto.getContentElement = function getContentElement() {
          return this.contentEl;
        };
        _proto.getScrollElement = function getScrollElement() {
          return this.contentWrapperEl;
        };
        _proto.getScrollbarWidth = function getScrollbarWidth() {
          try {
            if (getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar").display === "none" || "scrollbarWidth" in document.documentElement.style || "-ms-overflow-style" in document.documentElement.style) {
              return 0;
            } else {
              return scrollbarWidth(this.el);
            }
          } catch (e) {
            return scrollbarWidth(this.el);
          }
        };
        _proto.removeListeners = function removeListeners() {
          var _this5 = this;
          var elWindow = getElementWindow(this.el);
          if (this.options.autoHide) {
            this.el.removeEventListener("mouseenter", this.onMouseEnter);
          }
          ["mousedown", "click", "dblclick"].forEach(function(e) {
            _this5.el.removeEventListener(e, _this5.onPointerEvent, true);
          });
          ["touchstart", "touchend", "touchmove"].forEach(function(e) {
            _this5.el.removeEventListener(e, _this5.onPointerEvent, {
              capture: true,
              passive: true
            });
          });
          this.el.removeEventListener("mousemove", this.onMouseMove);
          this.el.removeEventListener("mouseleave", this.onMouseLeave);
          if (this.contentWrapperEl) {
            this.contentWrapperEl.removeEventListener("scroll", this.onScroll);
          }
          elWindow.removeEventListener("resize", this.onWindowResize);
          if (this.mutationObserver) {
            this.mutationObserver.disconnect();
          }
          if (this.resizeObserver) {
            this.resizeObserver.disconnect();
          }
          this.recalculate.cancel();
          this.onMouseMove.cancel();
          this.hideScrollbars.cancel();
          this.onWindowResize.cancel();
        };
        _proto.unMount = function unMount() {
          this.removeListeners();
          SimpleBar2.instances.delete(this.el);
        };
        _proto.isWithinBounds = function isWithinBounds(bbox) {
          return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;
        };
        _proto.findChild = function findChild(el, query) {
          var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;
          return Array.prototype.filter.call(el.children, function(child) {
            return matches.call(child, query);
          })[0];
        };
        return SimpleBar2;
      }();
      SimpleBar.defaultOptions = {
        autoHide: true,
        forceVisible: false,
        clickOnTrack: true,
        clickOnTrackSpeed: 40,
        classNames: {
          contentEl: "simplebar-content",
          contentWrapper: "simplebar-content-wrapper",
          offset: "simplebar-offset",
          mask: "simplebar-mask",
          wrapper: "simplebar-wrapper",
          placeholder: "simplebar-placeholder",
          scrollbar: "simplebar-scrollbar",
          track: "simplebar-track",
          heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper",
          heightAutoObserverEl: "simplebar-height-auto-observer",
          visible: "simplebar-visible",
          horizontal: "simplebar-horizontal",
          vertical: "simplebar-vertical",
          hover: "simplebar-hover",
          dragging: "simplebar-dragging"
        },
        scrollbarMinSize: 25,
        scrollbarMaxSize: 0,
        timeout: 1e3
      };
      SimpleBar.instances = /* @__PURE__ */ new WeakMap();
      SimpleBar.initDOMLoadedElements = function() {
        document.removeEventListener("DOMContentLoaded", this.initDOMLoadedElements);
        window.removeEventListener("load", this.initDOMLoadedElements);
        Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"), function(el) {
          if (el.getAttribute("data-simplebar") !== "init" && !SimpleBar.instances.has(el)) new SimpleBar(el, getOptions(el.attributes));
        });
      };
      SimpleBar.removeObserver = function() {
        this.globalObserver.disconnect();
      };
      SimpleBar.initHtmlApi = function() {
        this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this);
        if (typeof MutationObserver !== "undefined") {
          this.globalObserver = new MutationObserver(SimpleBar.handleMutations);
          this.globalObserver.observe(document, {
            childList: true,
            subtree: true
          });
        }
        if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
          window.setTimeout(this.initDOMLoadedElements);
        } else {
          document.addEventListener("DOMContentLoaded", this.initDOMLoadedElements);
          window.addEventListener("load", this.initDOMLoadedElements);
        }
      };
      SimpleBar.handleMutations = function(mutations) {
        mutations.forEach(function(mutation) {
          Array.prototype.forEach.call(mutation.addedNodes, function(addedNode) {
            if (addedNode.nodeType === 1) {
              if (addedNode.hasAttribute("data-simplebar")) {
                !SimpleBar.instances.has(addedNode) && document.documentElement.contains(addedNode) && new SimpleBar(addedNode, getOptions(addedNode.attributes));
              } else {
                Array.prototype.forEach.call(addedNode.querySelectorAll("[data-simplebar]"), function(el) {
                  if (el.getAttribute("data-simplebar") !== "init" && !SimpleBar.instances.has(el) && document.documentElement.contains(el)) new SimpleBar(el, getOptions(el.attributes));
                });
              }
            }
          });
          Array.prototype.forEach.call(mutation.removedNodes, function(removedNode) {
            if (removedNode.nodeType === 1) {
              if (removedNode.getAttribute("data-simplebar") === "init") {
                SimpleBar.instances.has(removedNode) && !document.documentElement.contains(removedNode) && SimpleBar.instances.get(removedNode).unMount();
              } else {
                Array.prototype.forEach.call(removedNode.querySelectorAll('[data-simplebar="init"]'), function(el) {
                  SimpleBar.instances.has(el) && !document.documentElement.contains(el) && SimpleBar.instances.get(el).unMount();
                });
              }
            }
          });
        });
      };
      SimpleBar.getOptions = getOptions;
      if (canUseDom) {
        SimpleBar.initHtmlApi();
      }
      return SimpleBar;
    });
  }
});
export default require_simplebar();
//# sourceMappingURL=simplebar_dist_simplebar.js.map
